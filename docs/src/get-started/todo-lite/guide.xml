<?xml version="1.0" encoding="UTF-8"?>
<guide xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../docs.xsd" id="todo-lite">
     <title>ToDo Lite Code Tour</title>
     <description>Tour of the code for the ToDo Lite example task list app, with sharing and photos.</description>
     <introduction>
          <paragraph>ToDo Lite is a task tracking application available for multiple platforms in the 
               <external-ref href="https://itunes.apple.com/us/app/todo-lite-sync/id697235451?mt=8">iOS</external-ref> 
               and <external-ref href="https://play.google.com/store/apps/details?id=com.couchbase.todolite">Android</external-ref> 
               app stores, so you can install it easily to try it out without setting up a development environment. Or follow the 
               per-platform build instructions in the <ref href="../set.xml">getting started</ref> 
               documentation, which will get you set up with a local development copy of ToDo Lite in your language.</paragraph>
         <paragraph>
             Here are links to the code ToDo Lite versions for <external-ref href="https://github.com/couchbaselabs/TodoLite-Android">Android</external-ref>,
             <external-ref href="https://github.com/couchbaselabs/ToDoLite-iOS">iOS</external-ref>, 
             <external-ref href="https://github.com/couchbaselabs/TodoLite-PhoneGap/blob/master/js/index.js">PhoneGap</external-ref>, 
             and <external-ref href="https://github.com/couchbaselabs/TodoLite-Motion">Ruby Motion</external-ref>. What holds the different 
             implementations together is that they all interoperate on the same data, via
             the <ref href="../sync-gateway/class.xml#cloud-sync-function">same sync function described in the getting started documention</ref>.
         </paragraph>
     </introduction>
     <articles>
          
          <article id="application-launch">
               <title>Application Launch</title>
               <description>Create handle to Couchbase Lite database, init config.</description>
               <introduction>
                    <paragraph>
                         Each mobile environment has it's own style of application initialization. This is where you
                         initialize resources that need to last the lifetime of the application. For instance, there 
                         are usually a few lines of code that initialize Couchbase Lite and your data model.
                    </paragraph>
               </introduction>
               <topics>
                    <topic id="initialize-the-database">
                         <title>Open the database</title>
                         <body>
                              <paragraph>
                                   Ask the manager for a handle on your database.
                              </paragraph>

                    <code-set>
                   <code-block language="objective-c"><![CDATA[
    CBLManager *manager = [CBLManager sharedInstance];
    NSError *error;
    self.database = [manager databaseNamed:@"todos" error:&error];
    if (error) {
        NSLog(@"error getting database %@",error);
        exit(-1);
    }
                      ]]></code-block>
                    <code-block language="java"><![CDATA[
    private void initDatabase() {
        try {
            Manager.enableLogging(Log.TAG, Log.VERBOSE);
            Manager.enableLogging(Log.TAG_SYNC, Log.DEBUG);
            Manager.enableLogging(Log.TAG_QUERY, Log.DEBUG);
            Manager.enableLogging(Log.TAG_VIEW, Log.DEBUG);
            Manager.enableLogging(Log.TAG_DATABASE, Log.DEBUG);

            manager = new Manager(new AndroidContext(getApplicationContext()), Manager.DEFAULT_OPTIONS);
        } catch (IOException e) {
            Log.e(TAG, "Cannot create Manager object", e);
            return;
        }

        try {
            database = manager.getDatabase(DATABASE_NAME);
        } catch (CouchbaseLiteException e) {
            Log.e(TAG, "Cannot get Database", e);
            return;
        }
    }
                    ]]></code-block>
                        <code-block language="javascript"><![CDATA[
   cblite.getURL(function(err, url) {
        console.log("getURL: " + JSON.stringify([err, url]))
        if (err) {return done(err)}


        // Note: this ajax call to nowhere is just for placating Android 4.1's web view w/r/t basic auth
        var xmlHttp = new XMLHttpRequest()
        xmlHttp.open( 'GET', url, false )
        xmlHttp.send( null )
        console.log( 'XMLHttpRequest get: ' +  xmlHttp.responseText )

        window.server = coax(url);
        var db = coax([url, appDbName]);
        setupDb(db, function(err, info){
            if (err) {return done(err)}

...

    function setupDb(db, cb) {
        db.put(function(err, res, body){
            // xhr PUT to the database URL
            // followed by a GET for database info
            db.get(cb)
        })
    }

                            ]]></code-block>
                </code-set>
               </body>
                    </topic>
                    <topic id="register-model-classes">
                         <title>Register Model Classes</title>
                         <body>
                              <paragraph>
                                   The database can automatically spawn model objects of the correct type with a few hints. (iOS specific)
                              </paragraph>

                    <code-set>
                   <code-block language="objective-c"><![CDATA[
    [[self.database modelFactory] registerClass:[List class] forDocumentType:@"list"];
    [[self.database modelFactory] registerClass:[Task class] forDocumentType:@"item"];
                      ]]></code-block>
                </code-set>
                         </body>
                    </topic>
                    <topic id="trigger-sync">
                         <title>Trigger sync</title>
                         <body>
                              <paragraph>
                                   If the user is already logged in, we want to start pull and push replication.
                                   Otherwise we'll wait for them to log in before syncing.
                              </paragraph>
                                                  <code-set>
                   <code-block language="objective-c"><![CDATA[
- (void)setupCBLSync {
    // this Sync Manager is part of the ToDoLite, you might perfer to implement yours with delegate 
    // callbacks instead of blocks.
    _cblSync = [[CBLSyncManager alloc] initSyncForDatabase:_database withURL:[NSURL URLWithString:kSyncUrl]];
    
    // Tell the Sync Manager to use Facebook for login.
    _cblSync.authenticator = [[CBLFacebookAuthenticator alloc] initWithAppID:kFBAppId];

    if (_cblSync.userID) {
        // we are logged in, go ahead and sync
        [_cblSync start];
    } else {
        // Application callback to create the user profile.
        // this will be triggered after we call [_cblSync start]
        [_cblSync beforeFirstSync:^(NSString *userID, NSDictionary *userData,  NSError **outError) {
            [self performSelectorOnMainThread:@selector(runBlock:) withObject:^{
                [self updateMyLists:userID userData:userData outError:outError];
            } waitUntilDone:YES];
        }];
    }
}
                      ]]></code-block>
                    <code-block language="java"><![CDATA[
        if (application.getCurrentUserId() != null) {
            switch (application.getAuthenticationType()) {
                case CUSTOM_COOKIE:
                    // since the user has already logged in before, assume that we
                    // can start sync using the persisted cookie.  if it's expired,
                    // a message will be shown and the user can login.
                    startSyncWithStoredCustomCookie();
                    break;
                case FACEBOOK:
                    loginWithFacebookAndStartSync();
                    break;
            }
        }
                    ]]></code-block>
                                                      <code-block language="javascript"><![CDATA[
if (!config.user) {
    $(".todo-login").show().click(function(){
        doFirstLogin(function(err) {
            if (err) {return loginErr(err)}
            goIndex()
        })
    })
 }

                                                          ]]></code-block>
                </code-set>
                         </body>
                    </topic>
               </topics>
               
          </article>
          
          <article id="create-and-update-tasks">
               <title>Create and Update Task Documents</title>
               <description>Interact with data via models.</description>
               <introduction>
                    <paragraph>
                         Before we can view any documents, we need to create them.
                    </paragraph>
               </introduction>
               <topics>
                    <topic id="create-a-task">
                         <title>Create a new task document</title>
               <body>
                    <paragraph>
                         To create a new task, the user inputs a name into the text field. The task document is tagged with the
                         <code>list_id</code> of the list it belongs to.
                    </paragraph>
                    <code-set>
                   <code-block language="objective-c"><![CDATA[
// Called when the text field's Return key is tapped.
- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    NSString *title = _addItemTextField.text;
    if (title.length == 0) {
        return NO;  // Nothing entered
    }
    [_addItemTextField setText:nil];
    
    // Create and save a new task:
    NSAssert(_detailItem, @"no current list");
    
    NSData *image = imageForNewTask ? [self dataForImage:imageForNewTask] : nil;
    Task *task = [_detailItem addTaskWithTitle:title withImage:image withImageContentType:ImageDataContentType];
    NSError *error;
    if ([task save:&error]) {
        imageForNewTask = nil;
        [self updateAddImageButtonWithImage:nil];
    } else {
        // [AppDelegate showAlert: @"Couldn't save new item" error: error fatal: NO];
    }
    
	return YES;
}
                      ]]></code-block>
                    <code-block language="java"><![CDATA[
            final EditText text = (EditText) header.findViewById(R.id.text);
            text.setOnKeyListener(new View.OnKeyListener() {
                @Override
                public boolean onKey(View view, int i, KeyEvent keyEvent) {
                    if ((keyEvent.getAction() == KeyEvent.ACTION_DOWN) &&
                            (keyEvent.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {
                        String inputText = text.getText().toString();
                        if (inputText.length() > 0) {
                            try {
                                Task.createTask(getDatabase(), inputText, mImageToBeAttached, listId);
                            } catch (CouchbaseLiteException e) {
                                Log.e(Application.TAG, "Cannot create new task", e);
                            }
                        }

                        // Reset text and current selected photo if available.
                        text.setText("");
                        deleteCurrentPhoto();

                        return true;
                    }
                    return false;
                }
            });
                    ]]></code-block>
                </code-set>
                    <paragraph>Eventually the model object writes to the database.</paragraph>
                    <code-set>
                         <code-block language="objective-c"><![CDATA[
- (instancetype) initInList: (List*)list
                  withTitle: (NSString*)title
                  withImage: (NSData*)image
       withImageContentType: (NSString*)contentType {
    NSAssert(list, @"Task must have a list");
    self = [super initInDatabase: list.document.database withTitle: title];
    if (self) {
        self.list_id = list;
        
        if (image) {
            [self setAttachmentNamed:kTaskImageName withContentType:contentType content:image];
        }
    }
    return self;
}
                              ]]></code-block>
                         <code-block language="java"><![CDATA[
public static Document createTask(Database database,
                                      String title,
                                      Bitmap image,
                                      String listId) throws CouchbaseLiteException {
        SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        Calendar calendar = GregorianCalendar.getInstance();
        String currentTimeString = dateFormatter.format(calendar.getTime());

        Map<String, Object> properties = new HashMap<String, Object>();
        properties.put("type", DOC_TYPE);
        properties.put("title", title);
        properties.put("checked", Boolean.FALSE);
        properties.put("created_at", currentTimeString);
        properties.put("list_id", listId);

        Document document = database.createDocument();

        UnsavedRevision revision = document.createRevision();
        revision.setUserProperties(properties);

        if (image != null) {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            image.compress(Bitmap.CompressFormat.JPEG, 50, out);
            ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
            revision.setAttachment("image", "image/jpg", in);
        }

        revision.save();

        return document;
    }
                              ]]></code-block>
           <code-block language="javascript"><![CDATA[
        $("#content form").submit(function(e) {
            e.preventDefault()
            var doc = jsonform(this)
            doc.type = "task"
            doc.list_id = id
            doc.updated_at = doc.created_at = new Date()
            config.db.post(doc, function(err, ok) {
                $("#content form input").val("")
            })
        })
                            ]]></code-block>
                    </code-set>
               </body>
                    </topic>
                    <topic id="check-a-checkbox">
               <title>Check a task checkbox</title>
               <body>
                    <paragraph>
                         When the user touches a task, they'll expect the checkbox to toggle. The way we do this is by saving a new revision
                         of a document with the opposite boolean value for the <code>checked</code> field.
                    </paragraph>
                    <code-set>
                         <code-block language="objective-c"><![CDATA[
// Called when a row is selected/touched.
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    CBLQueryRow *row = [self.dataSource rowAtIndex:indexPath.row];
    Task *task = [Task modelForDocument:row.document];
    
    // Toggle the document's 'checked' property:
    task.checked = !task.checked;
    
    // Save changes:
    NSError *error;
    if (![task save:&error]) {
//        [gAppDelegate showAlert: @"Failed to update item" error: error fatal: NO];
    }
}                              
                              ]]></code-block>
                         <code-block language="java"><![CDATA[
    // Task.java
    public static void updateCheckedStatus(Document task, boolean checked)
            throws CouchbaseLiteException {
        Map<String, Object> properties = new HashMap<String, Object>();
        properties.putAll(task.getProperties());
        properties.put("checked", checked);
        task.putProperties(properties);
    }                              
                              ]]></code-block>
                        <code-block language="javascript"><![CDATA[
function toggleChecked(id) {
    log("toggle", id)
    config.db.get(id, function(err, doc){
        doc.checked = !doc.checked
        doc.updated_at = new Date()
        config.db.put(id, doc, function(){})
    })
}                            
                            ]]></code-block>
                    </code-set>
               </body>
          </topic>
               </topics>
               
          </article>

  
          <article id="attach-a-photo">
              <title>Attach a Photo</title>
              <description>Photos are stored as binary attachments to the associated task document</description>
              <introduction>
                  <paragraph>A user can associate a photo with each task item, for instance a picture of the right brand of hot-sauce. We add the 
                  attachments to a new revision of the document which contains a reference with some metadata about the attachment.</paragraph>
              </introduction>
              <topics>
                  <topic id="take-photo">
                      <title>Take a Photo</title>
                      <body>
                          <paragraph>Before we can store the attachment, we have to get access to the data. This can be via the camera,
                          or loaded from the user's library.</paragraph>
                          <code-set>
                              <code-block language="javascript"><![CDATA[
function doCamera(id) {
    log("camera", id)
    if (!(navigator.camera && navigator.camera.getPicture)) {return}

    function gotPicture(imageData) {...}

    navigator.camera.getPicture(gotPicture, function(message) { // onFail
      log("camera error", id, message)
    }, {
        quality: 50,
        targetWidth : 1000,
        targetHeight : 1000,
        destinationType: Camera.DestinationType.DATA_URL
    });
}
                                  ]]></code-block>
                              <code-block language="objective-c"><![CDATA[
#pragma mark - UIImagePickerViewDelegate

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {
    UIImage *selectedImage = (UIImage *) [info objectForKey:UIImagePickerControllerEditedImage];
    if (taskToAddImageTo) {
        [taskToAddImageTo setImage:[self dataForImage:selectedImage] contentType:ImageDataContentType];
        
        NSError *error;
        if (![taskToAddImageTo save:&error]) {
            //TODO: Show an error dialog
        }
    } else {
        // new task
        imageForNewTask = selectedImage;
        [self updateAddImageButtonWithImage:imageForNewTask];
    }
    
    if (imagePickerPopover) {
        [imagePickerPopover dismissPopoverAnimated:YES];
    } else {
        [picker.presentingViewController dismissViewControllerAnimated:YES completion:^{ }];
    }
}
                                  ]]></code-block>
                              <code-block language="android"><![CDATA[
 @Override
        public void onActivityResult(int requestCode, int resultCode, Intent data) {
            super.onActivityResult(requestCode, resultCode, data);

            if (resultCode != RESULT_OK) {
                if (mCurrentTaskToAttachImage != null) {
                    mCurrentTaskToAttachImage = null;
                }
                return;
            }

            if (requestCode == REQUEST_TAKE_PHOTO) {
                mImageToBeAttached = BitmapFactory.decodeFile(mImagePathToBeAttached);

                // Delete the temporary image file
                File file = new File(mImagePathToBeAttached);
                file.delete();
                mImagePathToBeAttached = null;
            } else if (requestCode == REQUEST_CHOOSE_PHOTO) {
                try {
                    Uri uri = data.getData();
                    mImageToBeAttached = MediaStore.Images.Media.getBitmap(
                            getActivity().getContentResolver(), uri);
                } catch (IOException e) {
                    Log.e(Application.TAG, "Cannot get a selected photo from the gallery.", e);
                }
            }

            if (mImageToBeAttached != null) {
                if (mCurrentTaskToAttachImage != null) {
                    try {
                        Task.attachImage(mCurrentTaskToAttachImage, mImageToBeAttached);
                    } catch (CouchbaseLiteException e) {
                        Log.e(Application.TAG, "Cannot attach an image to a task.", e);
                    }
                } else { // Attach an image for a new task
                    Bitmap thumbnail = ThumbnailUtils.extractThumbnail(
                            mImageToBeAttached, THUMBNAIL_SIZE_PX, THUMBNAIL_SIZE_PX);

                    ImageView imageView = (ImageView) getActivity().findViewById(R.id.image);
                    imageView.setImageBitmap(thumbnail);
                }
            }

            // Ensure resetting the task to attach an image
            if (mCurrentTaskToAttachImage != null) {
                mCurrentTaskToAttachImage = null;
            }
        }
                                  ]]></code-block>
                          </code-set>
                      </body>
                  </topic>
                  <topic id="save-the-photo">
                      <title>Save it to the Database</title>
                      <body>
                          <paragraph>Once we have the picture we save it to the database.</paragraph>
                          <code-set>
                              <code-block language="javascript"><![CDATA[
    function gotPicture(imageData) {
        // load the document by id and save it back
        config.db(id, function(err, doc){
            doc._attachments = {
              "image.jpg" : {
                content_type : "image/jpg",
                data : imageData
              }
            }
            config.db.post(doc, function(err, ok) {})
        })
    }                                  ]]></code-block>
                              <code-block language="objective-c"><![CDATA[
- (void) setImage: (NSData*)image contentType: (NSString*)contentType {
    [self setAttachmentNamed:kTaskImageName withContentType:contentType content:image];
}
                                  ]]></code-block>
                              <code-block language="java"><![CDATA[
    public static void attachImage(Document task, Bitmap image) throws CouchbaseLiteException {
        if (task == null || image == null) return;

        UnsavedRevision revision = task.createRevision();

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        image.compress(Bitmap.CompressFormat.JPEG, 50, out);
        ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
        revision.setAttachment("image", "image/jpg", in);

        revision.save();
    }
                                  ]]></code-block>
                          </code-set>
                      </body>
                  </topic>
              </topics>
          </article>
         
          <article id="login-and-sync">
               <title>Login and Sync</title>
               <description>Don't forget to tag user data with their id after they log in, but before you sync.</description>
               <introduction>
                    <paragraph>When the user logs in, the application can trigger sync using the credentials 
                         obtained during the login process. In the application, the logic gets a little 
                    hard to follow, as this code is also responsible for prompting a fresh login when sessions
                    expire, etc. So we'll just look at a couple of example snippets. If you cloned the source
                    code yourself as part of a Getting Started tutorial (<ref href="../ios/class.xml#building-todo-lite">iOS</ref>, <ref href="../phonegap/build-and-run.xml">PhoneGap</ref>, or <ref href="../android/class.xml#building-todo-lite">Android</ref>) now 
                    might be a good time to browse it.</paragraph>
               </introduction>
               
               <topics>
                    <topic id="trigger-authenticated-sync">
                         <title>Trigger Authenticated Sync</title>
                         <body>
                    

                                        <code-set>
                         <code-block language="objective-c"><![CDATA[
- (void)defineSync {
    pull = [_database createPullReplication:_remoteURL];
    pull.continuous = YES;
    
    push = [_database createPushReplication:_remoteURL];
    push.continuous = YES;
    
    [self listenForReplicationEvents: push];
    [self listenForReplicationEvents: pull];
    
    [_authenticator registerCredentialsWithReplications: @[pull, push]];
}                             
                              ]]></code-block>
                         <code-block language="java"><![CDATA[
    public void startReplicationSyncWithCustomCookie(String name, String value, String path, Date expirationDate, boolean secure, boolean httpOnly) {

        Replication[] replications = createReplications();
        Replication pullRep = replications[0];
        Replication pushRep = replications[1];

        pullRep.setCookie(name, value, path, expirationDate, secure, httpOnly);
        pushRep.setCookie(name, value, path, expirationDate, secure, httpOnly);

        pullRep.start();
        pushRep.start();

        Log.v(TAG, "Start Replication Sync ...");

    }                            
                              ]]></code-block>
                                            <code-block language="javascript"><![CDATA[
function triggerSync(cb, retryCount) {
    if (!config.user) {
        return log("no user")
    }
    var remote = {
        url : config.site.syncUrl,
        auth : {facebook : {email : config.user.email}}
    },
    push = {
        source : appDbName,
        target : remote,
        continuous : true
    }, pull = {
        target : appDbName,
        source : remote,
        continuous : true
    },

    pushSync = syncManager(config.server, push),
    pullSync = syncManager(config.server, pull)

    log("pushSync", push)
                                                ]]></code-block>
                    </code-set>
                         </body>
                    </topic>
                    <topic id="tag-user-data">
                         <title>Tag User Documents</title>
                         <body>
                                        <paragraph>
                         The user may create lists and tasks without ever establishing a connection to the cloud host. If they 
                         decide they want to sync, they can authenicate (in the example app we use Facebook but you can easily
                         do custom auth). Because the data was created before we had an authenticated user to connect it with, 
                         documents are missing <code>user_id</code> tags, so a crucial step before we actually sync, is to tag 
                         all the existing local data with the <code>user_id</code>. 
                         (In our case we use the email address associated with the Facebook account)
                    </paragraph>
                                                            <code-set>
                         <code-block language="objective-c"><![CDATA[
+ (void) updateAllListsInDatabase: (CBLDatabase*)database withOwner: (Profile*)owner error: (NSError**)e {
    CBLQueryEnumerator *myLists = [[List queryListsInDatabase:database] run:e];
    if (*e) {
        return;
    }
    for (CBLQueryRow* row in myLists) {
        List* list = [List modelForDocument: row.document];
        list.owner = owner;
        [list save:e];
        if (*e) {
            return;
        }
    }
}                          
                              ]]></code-block>
                         <code-block language="java"><![CDATA[
    public static void assignOwnerToListsIfNeeded(Database database, Document user)
            throws CouchbaseLiteException {
        QueryEnumerator enumerator = getQuery(database).run();

        if (enumerator == null)
            return;

        while (enumerator.hasNext()) {
            Document document = enumerator.next().getDocument();

            String owner = (String) document.getProperty("owner");
            if (owner != null) continue;

            Map<String, Object> properties = new HashMap<String, Object>();
            properties.putAll(document.getProperties());
            properties.put("owner", user.getId());
            document.putProperties(properties);
        }
    }
                            
                              ]]></code-block>
                                                                <code-block language="javascript"><![CDATA[
function addMyUsernameToAllLists(cb) {
    config.views(["lists", {include_docs : true}], function(err, view) {
        if (err) {return cb(err)}
        var docs = [];
        view.rows.forEach(function(row) {
            row.doc.owner = "p:"+config.user.user_id
            docs.push(row.doc)
        })
        config.db.post("_bulk_docs", {docs:docs}, function(err, ok) {
            log("updated all docs", err, ok)
            cb(err, ok)
        })
    })
}
                                                                    ]]></code-block>
                    </code-set>
                    
               </body>
                    </topic>
               </topics>
               
               
          </article>
          
          <article id="sharing-lists">
               <title>Sharing Lists</title>
               <description>Who you share task lists with.</description>
               <introduction>
                    <paragraph>Once a user is syncing with the cloud host, they sync a list of users profiles for people they can 
                         share a list with. </paragraph>
               </introduction>
               <topics>
                    <topic id="view-profiles">
                         <title>View Profiles</title>
                         <body>
                    <paragraph>
                         This list is used to power the Share UI, by binding a view query to the list of names.
                         If someone signs up while you are in this view, you'll see their name pop up.
                    </paragraph>
                    <code-set>
                         <code-block language="objective-c"><![CDATA[

- (void)configureView
{
	// Do any additional setup after loading the view.
    _dataSource.query = [Profile queryProfilesInDatabase: database].asLiveQuery;
    _dataSource.labelProperty = @"name";    // Document property to display in the cell label}
}

// Customizes the appearance of table view cells.
- (void)couchTableSource:(CBLUITableSource*)source
             willUseCell:(UITableViewCell*)cell
                  forRow:(CBLQueryRow*)row
{
    
    // Configure the cell contents.
    // (cell.textLabel.text is already set, thanks to setting up labelProperty above.)
    NSString* personId = row.document.documentID;
//    if the person's id is in the list of members, or is the owner we are happy.
    bool member = NO;
    if ([myDocId isEqualToString:personId]) {
        member = YES;
    } else {
        NSMutableSet *intersection = [NSMutableSet setWithArray:_list.members];
        [intersection intersectSet:[NSSet setWithObject:personId]];
        
        if ([intersection count] > 0) {
            member = YES;
        }
    }

    if (member) {
        cell.accessoryType = UITableViewCellAccessoryCheckmark;
    } else {
        cell.accessoryType = UITableViewCellAccessoryNone;
    }
}
                              ]]></code-block>
                         <code-block language="java"><![CDATA[
            final Document user = (Document) getItem(position);
            final CheckBox checkBox = (CheckBox) convertView.findViewById(R.id.checked);
            boolean checked = isMemberOfTheCurrentList(user);
            checkBox.setChecked(checked);
            checkBox.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    try {
                        if (checkBox.isChecked()) {
                            List.addMemberToList(mCurrentList, user);
                        } else {
                            List.removeMemberFromList(mCurrentList, user);
                        }
                    } catch (CouchbaseLiteException e) {
                        Log.e(Application.TAG, "Cannot update a member to a list", e);
                    }
                }
            });
                              ]]></code-block>
                        <code-block language="javascript"><![CDATA[
config.views("profiles", function(err, view){
            view.title = doc.title

            // fold over the view and mark members as checked
            var members = (doc.members || []).concat(doc.owner);

            for (var i = view.rows.length - 1; i >= 0; i--) {
                var row = view.rows[i]
                for (var j = members.length - 1; j >= 0; j--) {
                    var member = members[j]
                    log("row", row.id, member)
                    if (row.id == member) {
                        row.checked = "checked"
                    }
                };
            };

            drawContent(config.t.share(view))
                            ]]></code-block>
                    </code-set>
               </body>
                    </topic>
                    <topic id="add-members">
                         <title>Add Members to a List</title>
                         <body>
                              <paragraph>
                                   When a user selects a person from the list, they are added as a member to the list (or removed).
                              </paragraph>
                              <code-set>
                         <code-block language="objective-c"><![CDATA[

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    CBLQueryRow *row = [self.dataSource rowAtIndex:indexPath.row];
    NSString *toggleMemberId = row.document.documentID;
    NSArray *ms = _list.members;
    if (!ms) ms = @[];

    NSLog(@"toggle %@ members %@", toggleMemberId, [ms componentsJoinedByString:@" "]);

    NSUInteger x = [ms indexOfObject:toggleMemberId];
    NSLog(@"index member %d",x);
    
    if (x == NSNotFound) {
//        add to array
        _list.members = [ms arrayByAddingObject:toggleMemberId];
    } else {
//        remove from array
        _list.members = [ms filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"SELF != %@" argumentArray:@[toggleMemberId]]];
    }
    NSLog(@"!!!!! %@", [_list.members componentsJoinedByString:@" "]);
    
    // Save changes:
    NSError* error;
    if (![_list save: &error]) {
    }
    [self configureView];
}
                              ]]></code-block>
                         <code-block language="java"><![CDATA[
    public static void addMemberToList(Document list, Document user)
            throws CouchbaseLiteException {
        Map<String, Object> newProperties = new HashMap<String, Object>();
        newProperties.putAll(list.getProperties());

        java.util.List<String> members = (java.util.List<String>) newProperties.get("members");
        if (members == null) members = new ArrayList<String>();
        members.add(user.getId());
        newProperties.put("members", members);

        try {
            list.putProperties(newProperties);
        } catch (CouchbaseLiteException e) {
            com.couchbase.lite.util.Log.e(Application.TAG, "Cannot add member to the list", e);
        }
    }

    public static void removeMemberFromList(Document list, Document user)
            throws CouchbaseLiteException {
        Map<String, Object> newProperties = new HashMap<String, Object>();
        newProperties.putAll(list.getProperties());

        java.util.List<String> members = (java.util.List<String>) newProperties.get("members");
        if (members != null) members.remove(user.getId());
        newProperties.put("members", members);

        list.putProperties(newProperties);
    }
                              ]]></code-block>
                    </code-set>
                             <code-block language="javascript"><![CDATA[
function toggleShare(doc, user, cb) {
    doc.members = doc.members || [];
    var i = doc.members.indexOf(user)
    if (i === -1) {
        doc.members.push(user)
    } else {
        doc.members.splice(i,1)
    }
    log("members", doc.members)
    config.db.post(doc, cb)
}
                                 ]]></code-block>
                         </body>
                    </topic>
               </topics>
               
          </article>
                    
          <article id="whats-missing">
               <title>What's Missing?</title>
               <description>Some things don't belong in an example app. How could we take it to the next level?</description>
               <introduction>
                                       <paragraph>
                         An example app isn't a real app, so what did we leave out, that you might add if you productized ToDo Lite? 
                    </paragraph>
                                        <paragraph>
                         We are working to close the gap with proof of concept feature implementations, etc. <external-ref href="https://github.com/couchbaselabs/ToDoLite-iOS/issues">Patches and bug reports welcome!</external-ref>
                    </paragraph>
               </introduction>
               <topics>
                    <topic id="user-relationships">
                         <title>User Relationships</title>
                         <body>
                              <paragraph>People would have to opt-in before they can sync lists to you. This can be implemented by modeling lists from users as invitations and requiring opt-in before syncing the associated channels.</paragraph>
                         </body>
                    </topic>
                    <topic id="push-notifications">
                         <title>Push Notifications</title>
                         <body>
                              <paragraph>For now you can read here about <external-ref href="https://github.com/couchbaselabs/CouchChat-iOS/tree/push/push-notifications">push
                                  notification</external-ref>s and the <ref href="../../guides/sync-gateway/integration/changes-worker-pattern.xml#pattern">changes worker pattern</ref>.</paragraph>
                         </body>
                    </topic>
                    <topic id="sortable-lists">
                         <title>Sortable Lists</title>
                         <body/>
                    </topic>
                    <topic id="web-access">
                         <title>Web Site version</title>
                         <body/>
                    </topic>
               </topics>

               
          </article>
          
          
     </articles>
</guide>

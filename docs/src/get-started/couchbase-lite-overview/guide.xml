<?xml version="1.0" encoding="UTF-8"?>
<guide xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="../../docs.xsd"
 id="couchbase-lite-overview">
 <title>Couchbase Lite Overview</title>
 <description>This guide will help you better understand how Couchbase Lite works and integrates across the solution.</description>
 <introduction>
  <paragraph>This guide will help you understand some of Couchbase Lite features, which is a local storage system that is integrated in your application and is available across native platforms as well with REST API support. Couchbase Lite is a fully functional on-device native embedded JSON database for mobile devices that can work standalone, in a P2P network and connects with Sync Gateway.</paragraph>

  <paragraph>We will begin to explore some of the features of Couchbase Lite in the Articles section.</paragraph>
 </introduction>
<articles>

  <article id="CBL-features">
     <title>Features</title>
     <introduction>
     <paragraph>Couchbase Lite library provides data persistance directly on your device with full CRUD operations that is flexible to your mobile feature developments.</paragraph>
     </introduction>

     <topics>
      <topic id="flexible-data-model">
       <title>Flexible Data Model</title>
       <body>
        <paragraph>Often times in mobile, feature specs are constantly changing and re-evaluated so Couchbase Mobile uses JSON data format throughout the stack without you having to rigidly define the data layout ahead of time. Complex design and migration time can be saved on any new updates as the data layout is essentially free-form in structure. The available native platform APIs allow JSON structures to map database documents to an application object model.</paragraph>
        </body>
      </topic>


      <topic id="always-available">
       <title>Always Available Data</title>
       <body>
        <paragraph>Data is stored locally on the device where data is decoupled and not dependent on network connectivity. With offline functionality, the stored data model attributes are in local JSON documents where you are able to have full access and control over.  This translates into complete offline support without requiring REST requests for content.</paragraph>
       </body>
      </topic>

       <topic id="Manage Database">
        <title>Manage Database Operations </title>
       <body>

        <paragraph>With data being stored locally on device, you can programmatically obtain the content through native APIs.  The Couchbase Lite database class comes with a set of database methods to allow you to fully manage and operate on your data.  We will explore the standard CRUD operations on the document database next.</paragraph>
      </body>
    </topic>
  </topics>
  </article>
    <article id="crud-operations">
     <title>CRUD Operations</title>
     <introduction>
     <paragraph>Couchbase Lite library provides data persistance directly on your device with full CRUD operations support.</paragraph>
     <paragraph>Data will be stored in a Document that is referenced by an unique ID within the Couchbase Lite database. Your data documents will consist of arbitrary JSON objects not enforced by rigid schemas. This provides an advantage of designing data models that can be naturally nested like a dictionary throughout the object model it is representing. This can be as natural or complex as needed when the data model is extended.</paragraph>
     </introduction>

     <topics>

      <topic id="create">
       <title>Create</title>
       <body>
        <paragraph>When dealing with data in Couchbase Mobile, we create documents that store KEYS and their Values.  Once there is content within a document, we can add that document to the database. </paragraph>

        <paragraph>Begin by creating an empty document through the Document class.</paragraph>

        <code-block language="java"><![CDATA[
          Document document = database.createDocument();

          ]]></code-block>

        </body>
      </topic>




      <topic id="retrieve">
       <title>Retrieve</title>
       <body>
        <paragraph>Once a document is populated with content, we can save it to the database.  The to retrieve the document from the database, we can first simply obtain the document's ID. </paragraph>

        <paragraph>Assuming that the ID is stored in a variable named, 'documentID' and then can programmatically call 'getDocument' to retrieve the appropriate document. </paragraph>

          <code-block language="java"><![CDATA[
          Document retrievedDocument = database.getDocument(documentID);

          ]]></code-block>
      </body>
    </topic>

    <topic id="update">
     <title>Update</title>
     <body>

      <paragraph>When entering new entries within an existing document, updating the document of interest is similar to when creating a new one.</paragraph>

      <paragraph>Simply create a new object that contains the object map of keys to values and then save the object into the document that had been created.</paragraph>

            <code-block language="java"><![CDATA[
        Map<String, Object> updatedProperties = new HashMap<String, Object>();
updatedProperties.putAll(retrievedDocument.getProperties());
updatedProperties.put ("message", "We're having a heat wave!");
updatedProperties.put ("temperature", "95");
try {
    retrievedDocument.putProperties(updatedProperties);
        ]]></code-block>

      <paragraph>Learn more in depth about updating an existing document over in the 'Training' section of the 'Develop' tab.</paragraph>

    </body>
  </topic>

  <topic id="delete">
   <title>Delete</title>
   <body>
    <paragraph>After a document has been entered into the database, deleting it is simply as calling the 'delete()' method on the document of interest.</paragraph>
   
    <code-block language="java"><![CDATA[
        retrievedDocument.delete();
      ]]></code-block>

        <paragraph>More specifics may be found in the 'Training' section under the 'Develop' tab.</paragraph>
      </body>
    </topic>
  </topics>

</article>

<article id="summary">
 <title>Summary</title>
 <introduction>
  <paragraph>
    With Couchbase Lite, data can be programmatically stored locally with just simply a few additional lines of code.
  </paragraph>

  <paragraph>
    You may find more specifically the platform level how-tos over in the 'Training' section of the 'Develop' tab.
  </paragraph>
  <paragraph>
    Next we learn 'What is Sync Gateway' and how to sync the data to the cloud. 
  </paragraph>
</introduction>
</article>
</articles>
</guide>

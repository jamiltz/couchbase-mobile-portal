<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../../../docs.xsd"
    id="webhooks">
            <title>Using webhooks</title>
            <description>How to use webhooks</description>
            <introduction>
                <paragraph>Sync Gateway provides a webhook feature that allows Sync Gateway to detect document changes and to use
                    asynchronous HTTP or HTTPS POSTs to post changed documents to URLs that you specify. In more detail, the steps
                    for a single webhook event handler are:</paragraph>
                    <ordered-list>
                        <list-item><strong>Detection</strong>: Sync Gateway detects document changes (creations, updates, and deletions) that are made through
                            Sync Gateway's Sync API, including through Couchbase Lite push replications</list-item>
                        <list-item><strong>Filtering</strong>: Optionally, Sync Gateway uses a <code>filter</code> function to examine the contents of the
                            changed documents, to decide which ones to post.</list-item>
                        <list-item><strong>Posting</strong>: Sync Gateway posts the changed documents identified by the <code>filter</code> function to the
                            specified URL. Without a <code>filter</code> function, Sync Gateway posts all changed documents.</list-item>
                    </ordered-list>
                <paragraph>You can define multiple webhook event handlers, for example, with different filtering criteria
                    and to post changed documents to different URLs.</paragraph>
                <note type="caution">Webhooks post your application's data, which might include user data, to URLs. Consider the security implications.</note>
            </introduction>
            <topics>
                <topic id="document_changed_events">
                    <title>When events are raised</title>
                    <body>
                        <paragraph>Sync Gateway raises <code>document_changed</code> events:</paragraph>
                        <unordered-list>
                            <list-item><paragraph>When the following Sync Gateway APIS create, update, or delete documents:</paragraph>
                                        <paragraph><strong>Database</strong>:</paragraph>
                                        <code-block>
                                            POST /{db}/_bulk_docs
                                        </code-block>
                                        <paragraph><strong>Document</strong>:</paragraph>
                                        <code-block>
                                            POST /{db}
                                            PUT /{db}/{doc}
                                            DELETE /{db}/{doc}
                                            PUT /{db}/{doc}/{attachment}
                                        </code-block></list-item>
                          <list-item><paragraph>When documents are created, updated, or deleted during a Couchbase Lite <emphasis>push</emphasis>
                                        replication session.</paragraph></list-item>
                        </unordered-list>
                    </body>
                </topic>
                <topic id="configuration">
                    <title>Configuring webhook event handlers</title>
                    <body>
                        <paragraph>You configure event handlers for webhooks with the <code>event_handlers</code> property in the database
                            configuration section of the JSON configuration file.</paragraph>
                        <paragraph>All event handlers share the following properties:</paragraph>
                        <table>
                            <header>
                                <row>
                                    <entry>Property</entry>
                                    <entry>Type</entry>
                                    <entry>Default</entry>
                                    <entry>Description</entry>
                                </row>
                            </header>
                            <body>
                                <row>
                                    <entry><code>document_changed</code></entry>
                                    <entry><code>string</code></entry>
                                    <entry><emphasis>None</emphasis></entry>
                                    <entry>Type of the event (<code>document_changed</code>)</entry>
                                </row>
                                <row>
                                    <entry><code>max_processes</code> (optional)</entry>
                                    <entry><code>uint</code></entry>
                                    <entry><code>500</code></entry>
                                    <entry>Maximum number of events that can be processed concurrently. No more
                                        than <code>max_processes</code> processes will be spawned for event handling.</entry>
                                </row>
                                <row>
                                    <entry><code>wait_for_process</code> (optional)</entry>
                                    <entry><code>string</code></entry>
                                    <entry><code>5</code></entry>
                                    <entry>Maximum wait time in milliseconds before canceling event processing for an event
                                        that is detected when the event queue is full.</entry>
                                </row>
                            </body>
                        </table>
                        <paragraph>The section <ref href="#performance">Tuning performance</ref> describes
                            how to use the properties <code>max_processes</code> and <code>wait_for_process</code>, and the property
                            <code>timeout</code> (described below), to tune performance.</paragraph>
                        <paragraph>Each <code>webhook</code> event handler has the following properties:</paragraph>
                        <table>
                            <header>
                                <row>
                                    <entry>Property</entry>
                                    <entry>Type</entry>
                                    <entry>Default</entry>
                                    <entry>Description</entry>
                                </row>
                            </header>
                            <body>
                                <row>
                                    <entry><code>handler</code></entry>
                                    <entry><code>string</code></entry>
                                    <entry><emphasis>None</emphasis></entry>
                                    <entry>Type of the event handler, in this case, <code>webhook</code></entry>
                                </row>
                                <row>
                                    <entry><code>url</code></entry>
                                    <entry><code>string</code></entry>
                                    <entry><emphasis>None</emphasis></entry>
                                    <entry>URL to use for the HTTP or HTTPS POST.</entry>
                                </row>
                                <row>
                                    <entry><code>filter</code> (optional)</entry>
                                    <entry><code>string</code></entry>
                                    <entry><emphasis>None</emphasis></entry>
                                    <entry>A JavaScript function to "filter" the documents to post, that is, to determine which documents to post.<paragraph>
                                        The <code>filter</code> function accepts the document body as input and returns a boolean value. If the <code>filter</code>
                                        function returns <code>true</code>, then Sync Gateway posts the document. If the <code>filter</code> function
                                        returns <code>false</code>, then Sync Gateway does not post the document. If no filter function is defined, then Sync Gateway
                                        posts all changed documents.</paragraph></entry>
                                </row>
                                <row>
                                    <entry><code>timeout</code> (optional)</entry>
                                    <entry><code>*uint64</code></entry>
                                    <entry><code>60</code></entry>
                                    <entry>Time in seconds to wait for a response to the POST operation. Using a <code>timeout</code> ensures that slow-running POST operations
                                        don't cause the webhook event queue to back up. Slow-running POST operations are "sacrified" (if they
                                        time out), so that new events can be processed. When the timeout is reached, Sync Gateway
                                        stops listening for a response. A value of 0 (zero) means no timeout.</entry>
                                </row>
                            </body>
                        </table>
                        <note type="note">Filtering only determines which documents to post. It does <emphasis>not</emphasis> extract
                            specific content from documents and post only that.</note>
                        <section id="examples-webhooks">
                            <title>Examples</title>
                            <body>
                                <paragraph>Following is a simple example of a <code>webhook</code> event handler. In this case, a single
                                    instance of a <code>webhook</code> event handler is defined for the event <code>document_changed</code>, no
                                    performance-tuning properties are set, and no document filtering occurs. </paragraph>
                        <code-block language="javascript"><![CDATA[
                            "event_handlers": {
                                "document_changed": [
                                 {"handler": "webhook",
                                  "url": "http://someurl.com"},
                                 }
                                ]
                             }
                        ]]></code-block>
                                <paragraph>Following is an example that defines two <code>webhook</code> event handlers. The <code>filter</code>
                                    function in the first handler recognizes documents with <code>doc.type</code> equal to <code>A</code> and posts
                                    the documents to the URL <code>http://someurl.com/type_A</code>. The <code>filter</code> function in the
                                    second handler recognizes documents with <code>doc.type</code> equal to <code>B</code> and posts
                                    the documents to the URL <code>http://someurl.com/type_B</code>.</paragraph>
                        <code-block language="javascript"><![CDATA[
                            "event_handlers": {
                                  "document_changed": [
                                    {"handler": "webhook",
                                     "url": "http://someurl.com/type_A",
                                     "filter": `function(doc) {
                                          if (doc.type == "A") {
                                            return true;
                                          }
                                          return false;
                                        }`
                                     },
                                    {"handler": "webhook",
                                     "url": "http://someurl.com/type_B",
                                     "filter": `function(doc) {
                                          if (doc.type == "B") {
                                            return true;
                                          }
                                          return false;
                                        }`
                                    }
                                 ]
                              }
                        ]]></code-block>
                            </body>
                        </section>
                    </body>
                </topic>
                <topic id="performance">
                    <title>Tuning performance</title>
                    <body>
                        <note>Default values of the properties <code>timeout</code>, <code>max_processes</code>, and
                            <code>wait_for_process</code> should work well in the majority of cases. You should not need to adjust
                            the values to tune performance. If you do need to tune performance, the information is here.</note>
                        <paragraph>Webhooks in Sync Gateway are designed to minimize performance impacts on Sync Gateway's regular
                            processing.</paragraph>
                        <paragraph>Based on your use case and server capabilities, you can tune performance of Sync Gateway nodes.
                            Adjust the value of configuration property <code>timeout</code> (described above) and the following
                            properties in the <code>event_handlers</code> property in the database configuration section of the
                            JSON configuration file:</paragraph>
                        <table>
                            <header>
                                <row>
                                    <entry>Property</entry>
                                    <entry>Type</entry>
                                    <entry>Default</entry>
                                    <entry>Description</entry>
                                </row>
                            </header>
                            <body>
                                <row>
                                    <entry><code>max_processes</code> (optional)</entry>
                                    <entry><code>uint</code></entry>
                                    <entry><code>500</code></entry>
                                    <entry>Maximum number of events that can be processed concurrently, that is, no more
                                        than <code>max_processes</code> concurrent processes will be spawned for event handling.</entry>
                                </row>
                                <row>
                                    <entry><code>wait_for_process</code> (optional)</entry>
                                    <entry><code>string</code></entry>
                                    <entry><code>5</code></entry>
                                    <entry>Maximum wait time in milliseconds before canceling event processing for an event
                                        that is detected when the event queue is full. If you set the value to 0 (zero), then
                                        incoming events are discarded immediately if the event queue is full.</entry>
                                </row>
                            </body>
                        </table>
                        <paragraph>Possible configuration scenarios include:</paragraph>
                        <unordered-list>
                            <list-item><strong>Avoid any blocking:</strong> To avoid any blocking of standard Sync Gateway
                            processing, set <code>wait_for_process</code> to 0 (zero). If the event queue is full, any incoming
                            events are discarded immediately.</list-item>
                            <list-item><strong>Ensure that most webhook posts are sent:</strong> To ensure that most webhook posts
                                are sent, set <code>wait_for_process</code> to a sufficiently high value. POST operations do not
                            guarantee delivery.</list-item>
                        </unordered-list>
                        <paragraph>The following is background information about the implementation of webhooks:</paragraph>
                        <unordered-list>
                            <list-item>When a <code>webhook</code> event handler is defined, after Sync Gateway has
                                updated a document, Sync Gateway adds a <code>document_changed</code> event to an
                                asynchronous event-processing queue. New processes are then spawned to apply the <code>filter</code>
                                function to the documents and to perform the HTTP POST operations.</list-item>
                            <list-item>Sync Gateway manages the number of processes that are spawned for webhook event
                                handling, so that slow response times from the HTTP POST operations
                                don't consume available CPU resources on Sync Gateway nodes.</list-item>
                            <list-item>To handle temporary event spikes, the event queue is capped at 3X <code>max_processes</code>.
                                When the event queue is full, newly generated events are not placed in the queue. The triggers that would
                                place the events in the queue are blocked until spaces in the queue open up. Events are discarded after
                                waiting for <code>wait_for_process</code> milliseconds.</list-item>
                        </unordered-list>
                        <section id="example-performance-tuning">
                            <title>Example</title>
                            <body>
                        <paragraph>Following is a sample configuration of event handlers that uses the performance-tuning properties:</paragraph>
                        <code-block language="javascript"><![CDATA[
                            "event_handlers": {
                                "max_processes" : 1000,
                                "wait_for_process" : "20",
                                "document_changed": [
                                 {"handler": "webhook",
                                  "timeout": 90,
                                  "url": "http://someurl.com"},
                                 }
                                ]
                             }
                        ]]></code-block>
                                <paragraph>In this example:</paragraph>
                                <unordered-list>
                                    <list-item>The event handler can process a maximum of <code>1000</code> events concurrently.</list-item>
                                    <list-item>The event handler will wait a maximum of <code>20</code> milliseconds before canceling event
                                        processing for an event that is detected when the event queue is full.</list-item>
                                    <list-item>The event handler waits <code>90</code> seconds for a response to a POST operation.</list-item>
                                </unordered-list>
                            </body>
                        </section>
                    </body>
                </topic>
                <topic id="logging">
                    <title>Logging</title>
                    <body>
                        <paragraph>When an event is not added to the event queue, but is instead discarded, a warning message is
                        written the the Sync Gateway log.</paragraph>
                        <paragraph>You can configure Sync Gateway to log information about event handling. Include either the log key
                            <code>Event</code> or <code>Events+</code> in the <code>Log</code> property in the <code>ServerConfig</code>
                            section of the Sync Gateway configuration file. <code>Events+</code> is more verbose.</paragraph>
                    </body>
                </topic>
            </topics>
</article>

<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="changes-worker">
    <title>Using the changes worker pattern</title>
    <description>How to use the changes worker pattern to integrate Sync Gateway with other backend 
        processes that implement business logic that reacts to changes in documents.</description>
    <introduction>
        <paragraph>This article describes how to use the changes worker pattern to integrate
            Sync Gateway with other backend processes. The changes worker pattern treats documents
            as state machines and uses a changes feed to obtain information about when documents
            change. This integration permits applications to implement business logic that reacts
            to changes in documents.</paragraph>
    </introduction>
    <topics>
        <topic id="pattern">
            <title>Changes Worker Pattern</title>
            <body>
                <paragraph> If you connect to a changes feed of some channels, you'll get lines of
                    JSON for each matching change. </paragraph>
                <paragraph> Now you can write a script to consume these channels and take action
                    based on them. For instance if you have a channel called "needs-email" you could
                    have a bot that sends an email and then saves the document back with a flag to
                    keep it out of the needs-email channel.
                </paragraph>
                <note>Your workers should be idempotent or you should track the <code>last_seq</code> somewhere durable.</note>
                <paragraph> There are <external-ref href="https://github.com/iriscouch/follow">existing
                    libraries to handle a changes feed</external-ref> with a worker
                    process. </paragraph>
        </body>
         </topic>
                <topic id="state-machines">
                    <title>State Machine Document Pattern</title>
                    <body>
                        <paragraph> One way to think of your documents when you are using them in a
                            changes-driven worker process, is as a state machine. So maybe you have
                            complex business logic to run when adding someone to a project. So not
                            only does the new project member have to be invited to the project, the
                            accepted invitation has to be approved by two layers of management. Yay
                            management. </paragraph>
                        <paragraph> To implement this you would treat the document as a state machine.
                            You can put a state field on it, and then the steps to get to the next
                            state can alternate between human and robot powered. </paragraph>
                        <paragraph> So in this case, the project owner would create the invitation,
                            and according to their level of access, they aren't able to send the
                            invitation without management approval. So they save it with
                            state="needs-approval" and the sync function automatically routes it to
                            a channel of approvals needed by managers. The invitation is sitting in
                            a needs-approval queue on some management iPhones, and when one of the
                            managers clicks OK, then it enters state="approved" which cases the sync
                            function to put it in a channel where it can be seen by the invitee. </paragraph>
                        <paragraph> Now when the invite clicks "accept" they can put it into
                            state="accepted" which may or may not need more management approval
                            before the a robot changes the state="active" which actually grants
                            access the invitee access to the project. </paragraph>
                    </body>
                </topic>
        <topic id="example-workflow">
            <title>Example Document Workflow</title>
            <body>
                <paragraph>This section describes a sample use case with point-of-sale (POS) applications.</paragraph>
                <paragraph>Mobile applications are deployed at the edge of the Internet, but large
                    parts of their business logic need to be run by central authorities. In this
                    post I’ll describe a technique for asynchronous business logic using Couchbase
                    Lite and Sync Gateway, that should be easy to reason about, and scale for most
                    applications. Implementing this technique requires only that you are able to
                    make HTTP and JSON requests to Sync Gateway from your application environment.
                    Typically you’ll end up running your application code as a daemon in the same
                    datacenter as Sync Gateway. </paragraph>
                <paragraph>To make this example more concrete, let’s flesh out the idea of a mobile
                    point-of-sale transactions application. The sales staff and managers install the
                    app on their phones, and sales staff ring up customer’s items using a native UI
                    and sensors to read package tags. When a sales associate enters all of a
                    customer’s items, they run the transaction via their device (again using sensors
                    to read credit card info) or send the transaction to a central terminal if the
                    customer is paying cash. </paragraph>
                <paragraph>The business logic we are are concerned with: Returns, certain high risk
                    items, and transactions over $100 need a manager to approve them, before the
                    transaction can be run. </paragraph>
                <paragraph>With JSON Anywhere, there are lots of opportunities to let the database
                    system do the hard work you may have relied on special purpose systems to handle
                    in the past. The patterns in this post are designed so you can incrementally
                    upgrade your system, adding features while building on existing code.
                </paragraph>
            </body>
        </topic>
                <topic id="state-machines">
                    <title>Documents As State Machines</title>
                    <body>
                        <paragraph> We’ll look at how treating documents like state machines can
                            simplify workflow management. We start with a workflow that involves a
                            human manager to approve transactions, and then move to a workflow that
                            replaces the manager with an automated risk agent. Finally, we extend
                            the agent to be push based instead of polling the database for jobs. </paragraph>
                        <section id="old-world">
                            <title>The Old World: 3-Tier Web Architecture</title>
                            <body>
                                <paragraph> In the classic 3-tier web services architecture, you’d
                                    have a server farm dedicated to API connections from your mobile
                                    clients. The clients would send transactions to these API
                                    servers, which would take some action or actions, perhaps
                                    updating a database or connecting to another web service, and
                                    eventually return a success or failure code to the client. This
                                    request and response model should be familiar to anyone who has
                                    worked on a web application or API. </paragraph>
                                <paragraph> One problem with this approach is that it assumes a
                                    client’s connection will hold up long enough for the transaction
                                    to commit. To work around these issues, the application server
                                    may provide the client with an intermediate transaction token
                                    that can be used for retries, or use other robustness
                                    techniques. </paragraph>
                                <paragraph> Another problem (or benefit) with the request and
                                    response model is that it can be used to put a veil of
                                    simplicity over complex internal workings. This is a great way
                                    to work when the application runs in the cloud. But when the
                                    application is distributed across mobile clients, the request
                                    and response application model outruns its usefulness.
                                </paragraph>
                            </body>
                        </section>
                        <section id="new-world">
                            <title>The New World: Let the Database Handle the Network</title>
                            <body>
                                <paragraph> By the time even a simple custom API is hardened against
                                    the real world, it has become a real technical investment. Instead
                                    you want a standard data model based on state and events, so
                                    that clients can be notified of new changes without polling. </paragraph>
                                <paragraph> When the database abstracts the network, application
                                    developers can depend on changes to JSON documents showing up on
                                    other devices and in the cloud. They don’t need to write custom
                                    code to handle client/server interactions. For simpler apps this
                                    might mean doing away with the application server altogether,
                                    and mediating all communication via the database abstraction.
                                </paragraph>
                            </body>
                        </section>
                    </body>
                </topic>
                <topic id="old-world">
                    <title>In Practice</title>
                    <body>
                        <paragraph> Once you have Couchbase Lite and Sync Gateway handling the
                            network connection, you can communicate transaction status via the
                            database. The shift in understanding here is becoming comfortable with
                            storing documents that represent incomplete or “pending” transactions.
                            The essence of the technique is writing a transaction in “pending” or
                            “needs-approval” state on the client, and then granting your managers
                            the permissions to move documents from “pending" in to “approved” state.
                            So you can have sales associates directly writing small transactions,
                            but automatically save large transactions as “pending” so they can be
                            brought to the attention of the manager. </paragraph>
                        <paragraph> So when your transaction processing code sees a JSON document
                            that represents a transaction that needs approval, because it has
                            doc.state == “pending” it will not take any action, but instead wait for
                            the document to move to the “approved” state, before running it. </paragraph>
                        <paragraph> By encapsulating a transaction state-machine as a document, you
                            have the flexibility of moving the document from state to state on any
                            platform you want. So you can have some state changes driven by a UI on
                            a mobile device, and others via the web, or as we’ll talk about
                            momentarily, by a robot. </paragraph>
                        <paragraph> In our application, we could ensure that all floor managers are
                            subscribed to a channel for the transactions that need approval, so that
                            they can be resolved on the manager’s device, giving a seamless
                            experience to the customer. </paragraph>
                        <section id="robots">
                            <title>We Want Robots!</title>
                            <body>
                                <paragraph> The above scenario illustrates the document state
                                    machine pattern, but we were promised automation. Instead of
                                    keeping a manager on the floor to approve transactions, wouldn’t
                                    it be faster and more reliable to automate risk assessment in
                                    the cloud? Moving the transaction approval responsibility from
                                    floor managers to an automated risk management agent shouldn’t
                                    require big technical changes. </paragraph>
                                <paragraph> The risk management agent can be deployed as a program
                                    in the cloud, with access to Sync Gateway. It will be interested
                                    in transactions that need approval, so it can run a query in
                                    Couchbase Server to find documents in the “pending” state. The
                                    risk manager takes each transaction, and queries whatever
                                    external systems are required in order to approve or deny the
                                    transaction. Once it has made its determination, the risk agent
                                    updates the document in Sync Gateway with a the tag “approved”
                                    or “denied”. The approved transactions are in the same state
                                    they’d been moved into by the floor manager in an earlier
                                    version of the application, but now they are being approved by a
                                    robot not a human. </paragraph>
                            </body>
                        </section>
                    </body>
                </topic>
        <topic id="push">
            <title>Example of a push-notification robot</title>
            <body>
                <paragraph>Link to example code and README with Urban Airship push API</paragraph>
                <paragraph> We haven’t yet described how we’d trigger the robot to look for
                    transactions that need approval. Polling is not efficient, so we’d like the
                    robot to be notified each time there is a document that needs approval, so that
                    it can being work immediately — without any expensive polling. We need Sync
                    Gateway to push new pending transactions to our robot. </paragraph>
                <paragraph> Sync Gateway already has an infrastructure for pushing messages to
                    channels, so we’ll build on top of that, by creating a channel for
                    "pending-transactions" in our sync function, and each time a transaction is
                    saved in the pending state, it will show up on this channel. So the robot can
                    just subscribe to the “pending-transactions” channel and it will be notified
                    each time there is work for it to do. </paragraph>
                <paragraph> Here is a sample implementation of a <external-ref
                        href="https://github.com/couchbaselabs/CouchChat-iOS/tree/push/push-notifications"
                        >push notification robot</external-ref> powered by Sync Gateway channels.
                </paragraph>
            </body>
        </topic>
    </topics>
</article>

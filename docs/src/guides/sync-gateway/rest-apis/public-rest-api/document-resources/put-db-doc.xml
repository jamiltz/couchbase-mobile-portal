<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../../../../../docs.xsd" 
	id="put-db-doc">
	<title>PUT /{db}/{doc}</title>
	<description>Create or update a document</description>
	<introduction>
		<paragraph>This request creates a new document or creates a new revision of an existing
			document. It enables you to specify the identifier for a new document rather than letting
			the software create an identifier. If you want to create a new document and let the
			software create an identifier, use the <code>POST /db</code> request. </paragraph>
		<paragraph>If the document specified by <code>doc</code> does not exist, a new document is
			created and assigned the identifier specified in <code>doc</code>. If the document already
			exists, the document is updated with the JSON document in the message body and given a new
			revision.</paragraph>
	</introduction>
	<topics>
		<topic id="request">
			<title>Request</title>
			<body>
				<paragraph>
					<strong>Request headers</strong>
				</paragraph>
				<unordered-list>
					<list-item>
						<paragraph>
							<code>Accept</code>—<emphasis>optional</emphasis>—Valid values are:</paragraph>
						<unordered-list>
							<list-item>application/json</list-item>
							<list-item>text/plain</list-item>
						</unordered-list>
					</list-item>
					<list-item>
						<paragraph><code>Content-Type</code>—<emphasis>Required</emphasis>—Must be <code>application/json</code>.</paragraph> 
					</list-item>
					<list-item>
						<paragraph>
							<code>If-Match</code> – <emphasis>Required for document updates if the
								<code>rev</code> query parameter or <code>_rev</code> body property
                                are not supplied</emphasis>
                                —Revision identifier of the requested document. </paragraph>
					</list-item>
				</unordered-list>
				<paragraph>
					<strong>Query parameters</strong>
				</paragraph>
				<table>
					<header>
						<row>
							<entry>Name</entry>
							<entry>Type</entry>
							<entry>Description</entry>
							<entry>Default</entry>
						</row>
					</header>
					<body>
						<!--<row>
							<entry>
								<code>batch</code>
							</entry>
							<entry>string</entry>
							<entry>Stores the document in batch mode. To use, set the value to
								<code>ok</code>.</entry>
							<entry>none</entry>
						</row>-->
						<row>
							<entry>
								<code>new_edits</code>
							</entry>
							<entry>Boolean</entry>
							<entry>Setting this to <code>false</code> indicates that the request
                                body is an already-existing revision that should be direcly inserted
                                into the database, instead of a modification to apply to the
                                current document. (This mode is used by the replicator.)</entry>
							<entry>true</entry>
						</row>
						<row>
							<entry>
								<code>rev</code>
							</entry>
							<entry>string</entry>
							<entry>Revision identifier of the parent revision the new one should
                                replace. (Not used when creating a new document.)</entry>
							<entry>none</entry>
						</row>
					</body>
				</table>
			</body>
		</topic>
		<topic id="response">
			<title>Response</title>
			<body>
				<paragraph>
					<strong>Status codes</strong>
				</paragraph>
				<unordered-list>
					<list-item>201 Created – Document created and stored on disk</list-item>
					<list-item>202 Accepted – Document data accepted, but not yet stored on disk </list-item>
					<list-item>400 Bad Request – Invalid request body or parameters </list-item>
					<list-item>401 Unauthorized – Write privileges required</list-item>
					<list-item>404 Not Found – Specified database or document ID doesn’t
						exist</list-item>
					<list-item>409 Conflict – Document with the specified ID already exists or specified
						revision is not latest for target document</list-item>
				</unordered-list>
				<paragraph>
					<strong>Response headers</strong>
				</paragraph>
				<unordered-list>
					<list-item>
						<paragraph>
							<code>Content-Type</code>—The value can be:</paragraph>
						<unordered-list>
							<list-item>application/json</list-item>
							<list-item>text/plain; charset=utf-8</list-item>
						</unordered-list>
					</list-item>
					<list-item>
						<paragraph>
							<code>ETag</code>—Revision identifier enclosed in double quotes</paragraph>
					</list-item>
				</unordered-list>
				<paragraph>
					<strong>Message body</strong>
				</paragraph>
				<paragraph>The response is a JSON document that contains the following
					objects:</paragraph>
				<table>
					<header>
						<row>
							<entry>Name</entry>
							<entry>Type</entry>
							<entry>Description</entry>
						</row>
					</header>
					<body>
						<row>
							<entry>
								<code>id</code>
							</entry>
							<entry>String</entry>
							<entry>Document identifier</entry>
						</row>
						<row>
							<entry>
								<code>ok</code>
							</entry>
							<entry>Boolean</entry>
							<entry>Indicates whether the operation was successful</entry>
						</row>
						<row>
							<entry>
								<code>rev</code>
							</entry>
							<entry>String</entry>
							<entry>revision identifier</entry>
						</row>
					</body>
				</table>
			</body>
		</topic>

		<topic id="example">
			<title>Example</title>
			<body>
				<paragraph>The following example creates a new document with the identifier
					<code>ButterChicken</code> in a database named <code>cookbook</code>.</paragraph>
				<paragraph>
					<strong>Request</strong>
				</paragraph>
				<code-block>
PUT /cookbook/ButterChicken HTTP/1.1
Host: localhost:59840
Content-Type: application/json

{
    "description": "A very buttery chicken dish",
    "nutrition": "500 calories",
    "servings": 4,
    "title": "Butter Chicken"
}
</code-block>
				<paragraph>
					<strong>Response</strong>
				</paragraph>
				<code-block>
HTTP/1.1 201 Created
Accept-Ranges: bytes
Content-Length: 92
Content-Type: application/json
Date: Fri, 13 Dec 2013 19:34:04 GMT
Etag: "1-4101356e9c47d15d4f8f7390d05dbbcf"
Location: http://localhost:59840/cookbook/ButterChicken
Server: CouchbaseLite 1.486

{
  "id" : "ButterChicken",
  "rev" : "1-4101356e9c47d15d4f8f7390d05dbbcf",
  "ok" : true
}
</code-block>
				<paragraph>The following example updates the document with the identifier
					<code>ButterChicken</code> that was created in the previous example. To update an
					existing document, the revision identifier of the current document must be supplied
					in an <code>If-Match</code> header or a <code>rev</code> query parameter. This
					example shows how to use both methods of specifying the revision.</paragraph>
				<paragraph>
					<strong>Request</strong>
				</paragraph>
				<paragraph>This form of the request uses the <code>If-Match</code> header to supply the
					revision identifier:</paragraph>
				<code-block>
PUT /cookbook/ButterChicken HTTP/1.1
Host: localhost:59840
Content-Type: application/json
If-Match: 1-4101356e9c47d15d4f8f7390d05dbbcf

{
    "description": "A very buttery chicken dish",
    "nutrition": "500 calories",
    "serving-suggestion": "Serve with rice and green beans.",
    "servings": 4,
    "title": "Butter Chicken"
}
</code-block>
				<paragraph>To use the <code>rev</code> query parameter rather than the
					<code>If-Match</code> header to supply the revision identifier, structure the request
					like this:</paragraph>
				<code-block>
PUT /cookbook/ButterChicken?rev=1-4101356e9c47d15d4f8f7390d05dbbcf HTTP/1.1
Host: localhost:59840
Content-Type: application/json

{
    "description": "A very buttery chicken dish",
    "nutrition": "500 calories",
    "serving-suggestion": "Serve with rice and green beans.",
    "servings": 4,
    "title": "Butter Chicken"
}
</code-block>
				<paragraph>
					<strong>Response</strong>
				</paragraph>
				<code-block>
HTTP/1.1 201 Created
Accept-Ranges: bytes
Content-Length: 92
Content-Type: application/json
Date: Fri, 13 Dec 2013 19:56:09 GMT
Etag: "2-1b76d07281d4a576130c7d8f9f621d5e"
Location: http://localhost:59840/cookbook/ButterChicken
Server: CouchbaseLite 1.486

{
  "id" : "ButterChicken",
  "rev" : "2-1b76d07281d4a576130c7d8f9f621d5e",
  "ok" : true
}
</code-block>
			</body>
		</topic>








	</topics>
</article>

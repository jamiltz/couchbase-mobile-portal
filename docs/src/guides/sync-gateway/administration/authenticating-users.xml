<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../../docs.xsd"
         id="authenticating-users">
   <title>Authenticating Users</title>
   <description>This article focuses on how to authenticate authorized users to be able to access the Sync Gateway and their remote databases.</description>
   <introduction>
      <paragraph>You can authenticate users by using the methods described in the following sections. This article focuses on how to authenticate authorized
         users to be able to access the Sync Gateway and their remote databases.</paragraph>
   </introduction>
   <topics>
      <topic id="http">
         <title>HTTP</title>
         <body>
            <paragraph>Sync Gateway allows clients to authenticate by using either HTTP Basic Auth or cookie-based sessions. The session URL is
               <code>/dbname/_session</code>.</paragraph>
         </body>
      </topic>
      <topic id="facebook">
         <title>Facebook authentication</title>
         <body>
            <paragraph>Sync Gateway supports <external-ref href="http://developers.facebook.com/docs/facebook-login/">Facebook Login</external-ref>,
               which allows users to log in by using their Facebook account. To enable it, add a top-level <code>facebook</code> property to your
               server configuration file. For example:</paragraph>
            <code-block>
"facebook" : {
   "register" : true
}
</code-block>
            <paragraph>Clients log in by sending a POST request to <code>/dbname/_facebook</code>, with a JSON body that contains the following objects:</paragraph>
            <unordered-list>
               <list-item>
                  <code>access_token</code>—Access token returned by Facebook</list-item>
               <list-item>
                  <code>email</code>—Email address of the user</list-item>
               <list-item>
                  <code>remote_url</code>—Sync Gateway replication endpoint URL</list-item>
            </unordered-list>
            <paragraph>Just as with a <code>_session</code> login, the response sets a session cookie.</paragraph>
         </body>
      </topic>
      <topic id="persona">
         <title>Mozilla Persona authentication</title>
         <body>
            <paragraph>Sync Gateway supports <external-ref href="https://developer.mozilla.org/en-US/docs/persona">Mozilla Persona</external-ref>,
               a sign-in system for the web that allows clients to authenticate by using an email address. You can enable Persona either by modifying
               your server configuration file or by starting Sync Gateway with an additional command-line option.</paragraph>
            <paragraph>To enable Persona by modifying the configuration file, add a top-level <code>persona</code> property to
               the <strong>config.json</strong> file. The value of the <code>persona</code> property is an object with an <code>origin</code> property
               that contains your server's canonical root URL as seen by clients. For example:</paragraph>
            <code-block>
"persona" : {
   "origin" : "http://example.com/",
   "register" : true
}
</code-block>
            <paragraph>To enable Persona when you start Sync Gateway, add the <code>-personaOrigin</code> option to the command line and specify
               the server's canonical root URL. For example:</paragraph>
            <code-block>
$ sync_gateway -personaOrigin http://example.com
</code-block>
            <paragraph>The <code>origin</code> URL must be specified explicitly because the Persona protocol requires both client and server to agree
               on the server's identity, and there's no reliable way to derive the URL on the server, especially if it's behind a proxy.</paragraph>
            <paragraph>After that's set up, you need to set the <code>email</code> property of the user accounts, so that the server can look up the
               account based on the email address given in the Persona credentials.</paragraph>
            <paragraph>Clients log in by sending a POST request to <code>/dbname/_persona</code>. The request body is a JSON document that contains
               an <code>assertion</code> property whose value is the signed assertion received from the identity provider. Just as with a
               <code>_session</code> login, the response sets a session cookie.</paragraph>
         </body>
      </topic>
      <topic id="facebook-and-persona-account-registration">
         <title>Facebook and Persona Account Registration</title>
         <body>
            <paragraph>If the <code>register</code> property of the Facebook or Persona configuration is true, then clients can implicitly register
               new user accounts by authenticating through Facebook or Persona. If Sync Gateway verifies the client's assertion, but no existing
               user account has that email address, it creates a new user account for that email and returns a session cookie.</paragraph>
            <paragraph>The user name for the new account is the same as the authenticated email address and has a random password. There is no way
               to retrieve the password, so in the future the client must continue to log in by using Facebook or Persona, unless the app server
               replaces the password with one known to the client.</paragraph>
         </body>
      </topic>
      <topic id="custom--indirect--authentication">
         <title>Custom (Indirect) Authentication</title>
         <body>
            <paragraph>An app server can create a session for a user by sending a POST request to <code>/dbname/_session</code>. This works only
               on the admin port. </paragraph>
            <paragraph>The request body is a JSON document with the following properties:</paragraph>
            <unordered-list>
               <list-item>
                  <paragraph>
                     <code>name</code>: User name</paragraph>
               </list-item>
               <list-item>
                  <paragraph>
                     <code>ttl</code>: Number of seconds until the session expires. This is an optional parameter. If <code>ttl</code> is not provided,
                     the default value of 24 hours is used.</paragraph>
               </list-item>
            </unordered-list>
            <paragraph>The response body is a JSON document that contains the following properties:</paragraph>
            <unordered-list>
               <list-item>
                  <paragraph>
                     <code>session_id</code>: Session string </paragraph>

                  <unordered-list>
                     <list-item>
                        <code>cookie_name</code>: Name of the cookie the client should send </list-item>
                     <list-item>
                        <code>expires</code> : Date and time that the session expires</list-item>
                  </unordered-list>
               </list-item>
            </unordered-list>
            <paragraph>This allows the app server to optionally do its own authentication using the following control flow:</paragraph>
            <ordered-list>
               <list-item>
                  <paragraph>Client sends credentials to your app server.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>App server authenticates the credentials however it wants (LDAP, OAuth, and so on).</paragraph>
               </list-item>
               <list-item>
                  <paragraph>App server sends a POST request with the user name to the Sync Gateway Admin REST API server
                     <code>/dbname/_session</code> endpoint.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>If the request fails with a 404 status, there is no Sync Gateway user account with that name. The app server can then
                     create one (also using the Admin REST API) and  repeat the <code>_session</code> request.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>The app server adds a <code>Set-Cookie:</code> HTTP header to its response to the client, using the session cookie
                     name and value received from the gateway.</paragraph>
               </list-item>
            </ordered-list>
            <paragraph>Subsequent client requests to the gateway will now include the session in a cookie, which the gateway will recognize. For
               the cookie to be recognized, your site must be configured so that your app's API and the gateway appear on the same public host name
               and port.</paragraph>
         </body>
      </topic>
      <topic id="session-expiration">
         <title>Session Expiration</title>
         <body>
            <paragraph>By default, a session created on Sync Gateway lasts 24 hours. If you create sessions by sending a POST request to
               <code>/db/_session</code>, you can set a custom value that overrides the system default. However, if you are using Persona
               for authentication, the only way to customize the session length is by modifying the <code>kDefaultSessionTTL</code> constant
               in the <code>rest_session.go</code> file.  </paragraph>
         </body>
      </topic>
   </topics>
</article>

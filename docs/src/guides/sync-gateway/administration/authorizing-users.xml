<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../../docs.xsd"
         id="authorizing-users">
   <title>Authorizing Users</title>
   <description>This article focuses on how to authorize users to be able to access the Sync Gateway and their remote databases.</description>
   <introduction>
      <paragraph>You can authorize users and control their access to your database by creating user accounts and assigning roles to users. This article focuses on how to authorize users to be able to access the Sync Gateway and their remote databases.</paragraph>
   </introduction>
   <topics>
      <topic id="accounts">
         <title>Accounts</title>
         <body>
            <paragraph>You manage accounts by using the Admin REST API.This interface is privileged and for administrator use only. To manage accounts, you need to have some other server-side mechanism that calls through to this API.</paragraph>
            <paragraph>The URL for a user account is <code>/databasename/_user/name</code>, where databasename is the configured name of the database and name is the user name. The content of the resource is a JSON document with the following properties:</paragraph>
            <unordered-list>
               <list-item>
                  <paragraph>
                     <code>admin_channels</code>: Lists the channels that the user is granted access to by the administrator. The value is an array of channel name strings.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>
                     <code>admin_roles</code>: The roles that the user is explicitly granted access to through the Admin REST API. It contains an array of role name strings. </paragraph>
               </list-item>
               <list-item>
                  <paragraph>
                     <code>all_channels</code>: Like the <code>admin_channels</code> property, but also includes channels the user is given access to by other documents via a sync function. This is a derived property and changes to it are ignored.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>
                     <code>disabled</code>: This property is usually not included. if the value is set to <code>true</code>, access for the account is disabled.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>
                     <code>email</code>: The user's email address. This property is optional, but Persona login needs it.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>
                     <code>name</code>: The user name (the same name used in the URL path). The valid characters for a user name are alphanumeric ASCII characters and the underscore character. The name property is required  in a POST request. You don't need to include it in a PUT request because the user name is specified in the URL.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>
                     <code>password</code>: In a PUT or POST request, you can set the user's password with this property. It is not returned by a GET request.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>
                     <code>roles</code>: Like the <code>admin_roles</code> property, but also includes roles the user is given access to by other documents via a sync function. This is a derived property and changes to it are ignored. It contains an array of role name strings.</paragraph>
               </list-item>
            </unordered-list>
            <paragraph>You can create a new user by sending a PUT request to its URL or by sending a POST request to <code>/$DB/_user/</code>. </paragraph>
         </body>
      </topic>
      <topic id="anonymous-access">
         <title>Anonymous Access</title>
         <body>
            <paragraph>A special user account named <code>GUEST</code> applies to unauthenticated requests. Any request to the Sync REST API that does not have an <code>Authorization</code> header or a session cookie is treated as coming from the <code>GUEST</code> account. This account and all anonymous access is disabled by default. </paragraph>
            <paragraph>To enable the GUEST account,  set its <code>disabled</code> property to false. You might also want to give it access to some channels. If you don't assign some channels to the GUEST account, anonymous requests won't be able to access any documents. The following sample command enables the GUEST account and allows it access to a channel named public:</paragraph>
            <code-block>
$ curl -X PUT localhost:4985/$DB/_user/GUEST --data \
   '{"disabled":false, "admin_channels":[“public”]}'
</code-block>
         </body>
      </topic>
      <topic id="roles">
         <title>Roles</title>
         <body>
            <paragraph>
               <emphasis>Roles</emphasis> are named collections of channels. A user account can be assigned to zero or more roles. A user inherits the channel access of all roles it belongs to. This is very much like Unix groups, except that roles do not form a hierarchy.</paragraph>
            <paragraph>You access roles through the Admin REST API much like users are accessed, through URLs of the form <code>/dbname/_role/name</code>. Role resources have a subset of the properties that users do: <code>name</code>, <code>admin_channels</code>, <code>all_channels</code>.</paragraph>
            <paragraph>Roles have a separate namespace from users, so it's legal to have a user and a role with the same name.</paragraph>
         </body>
      </topic>
   </topics>
</article>

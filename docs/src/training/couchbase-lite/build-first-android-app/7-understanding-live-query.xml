<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="understanding-live-query">
    <title>Understanding a LiveQuery</title>
    <description></description>
    <introduction>
        <paragraph>
            To help us track the constant changes that could be occurring in mobile applications, Couchbase Lite has an implementation of the Observer pattern known as a LiveQuery. We will use LiveQuery to go deeper into the possibilities of how listening for changes on the server can help us provide reactive UI solutions.
        </paragraph>
    </introduction>

    <tasks>
        <task id="introduction">
            <title>Introduction</title>
            <body>
                <paragraph>
                    LiveQuery is a type of Observer [GoF] on the Query object and is encapsulated by the class:
                    <code-block language="java">
                            {
                                com.couchbase.lite.LiveQuery;
                            }
                    </code-block>
                    <paragraph>
                    The Observer pattern sets up a relationship between two objects whereby the Observer (or listener) is notified by the object of events it is observing. The Listener must register with the object to which it is observing by using some method, so that the object knows which devices are registered and observing. Then the Listener is “notified” of any changes by having a method invoked by the object to which it is listening. </paragraph>

                    <paragraph>
                    We get a LiveQuery from the Query factory method <code>toLiveQuery()</code> and because LiveQuery came from the Query itself, it is already set to Observe the Query data. That is, the Query contains data from the View. We are going to observe that data, using a ‘ChangeListener’ </paragraph>

                    <paragraph>
                    To be notified per the Observer pattern of any remote changes to the data underlying the Query we are observing, we will:</paragraph>

                <ordered-list>
                    <list-item>
                        Invoke the LiveQuery <code>addChangeListener(…)</code> method and pass in a parameter as a new ChangeListener. This will register our listener.
                    </list-item>
                    <list-item>
                        This ChangeListener should override the method <code>changed(…)</code>
                    </list-item>
                    <list-item>
                        Start the LiveQuery so it is listening for changes to the data bounded by the Query.
                    </list-item>
                </ordered-list>
                </paragraph>

                <code-block language="java"><![CDATA[
                    LiveQuery myLiveQuery = eventsByDateView.createQuery().toLiveQuery();
                    myLiveQuery.addChangeListener(

                    /* instantiate the ChangeListener right here */

                    	new LiveQuery.ChangeListener() {

                    		@Override /* A notification listener method */
                    		public void changed(ChangeEvent changeEvent) {

                    			Log.i(“couchbaseevents”, "Data changed in the Query…");
                            }
                        }
                    );

                    myLiveQuery.start(); //Start listening for change
                ]]>
                </code-block>
                Let us explore and understand the listener code above and its deeper ramifications:

                <paragraph>
                  <ordered-list>
                    <list-item>
                        First we obtain a <code>LiveQuery</code> by declaring and instantiating a variable, <code>myLiveQuery</code>
                    </list-item>
                    <list-item>
                        Then we add a ChangeListener to the LiveQuery though the <code>addChangeListener</code> method, so we may do something whenever data in our Query changes
                    </list-item>
                    <list-item>
                        We have to instantiate the ChangeListener and override the appropriate notification listener method, <code>changed()</code> 
                    </list-item>
                    <list-item>
                        Within the method we write to the log file or also you may perform anything you want within this method
                    </list-item>
                </ordered-list>
 
                </paragraph>
            </body>
        </task>

        <task id="the-change-event">
            <title>The Change Event</title>
            <body>
                <paragraph>
                Let us understand more about the incoming ChangeEvent, and what it means that the <code>changed()</code> method was invoked, and given a reference to this event by the Couchbase Lite API.
                <paragraph>
                <paragraph>
                The LiveQuery is listening for changes on document versions. For example, let us say that 'DocumentA' is part of the Query.  When the revision of 'DocumentA' is saved after an update, there will be a new version of 'DocumentA' automatically generated. With the new document version being available for Reads, this will cause the ChangeEvent to be instantiated and passed over to the <code>changed(…)</code> method.  This means that:        
                </paragraph>

                  <ordered-list>
                    <list-item>
                        Every version of a document causes a new ChangeEvent to be instantiated such that if 'DocumentA' had one data element updated, like an “address” property, then this will cause a ChangeEvent to be fired.
                    </list-item>
                    <list-item>
                        Also that if 'DocumentA' has three data property values that changed, such as “address”, “date”, and “description” fields, then still only one ChangeEvent would be fired off. The reason is that LiveQuery only listens at the Document version level and not at the data attribute level within the document.
                    </list-item>
                    <list-item>
                        Furthermore, we receive the ChangeEvent but no details about what within the document was changed.
                        Therefore, the LiveQuery notifies the ChangeListener that data in the Query has been updated, not how the actual data has been updated.
                    </list-item>
                    <list-item>
                        In order to figure out what exactly changed within the document, we would need to run a new Query and compare the results to that of the previous query.
                    </list-item>
                  </ordered-list>
 
                </paragraph>
                    To recap, the ChangeListener <code>changed(…)</code> method is invoked each time any document in the Query has a version change and is passed a ChangeEvent.
                    The ChangeEvent itself has access to the original Query data (before any change occurred) via the <code>getRows()</code> method, which provides a QueryEnumerator over that original data like this:
                </paragraph>

                <code-block language="java"><![CDATA[
                    public void changed (ChangeEvent changeEvent) {

                    QueryEnumerator originalData = changeEvent.getRows();

                    /* work with Query data */
                    }
                ]]>
                </code-block>
            </body>
        </task>


    </tasks>
</lesson>

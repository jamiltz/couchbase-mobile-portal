<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="do-crud">
	<title>Performing CRUD operations</title>
	<description>Create, retrieve, update, and delete documents in the HelloWorld database</description>
	<introduction>
		<paragraph>CRUD operations represent the basic interactions with a Couchbase Lite database.
			This section demonstrates how to create, retrieve, update, and delete documents. The
			tutorial code creates just one document and then in turn retrieves it, updates it, and
			finally deletes it. </paragraph>
		<paragraph>In this section, you add code to the <code>MainActivity</code> class.</paragraph>
	</introduction>

	<tasks>

		<task id="create-document">
			<title>Create a document</title>
			<body>
				<paragraph>This section of the HelloWord tutorial code generates some data for a new
					document, and then creates the new document and writes it to the database. It also
					outputs some messages to the console.</paragraph>
				<ordered-list>
					<list-item>
						<paragraph>Add the following code before the last log statement in the
							<code>onCreate</code> method:
						</paragraph>
						<code-block language="java"><![CDATA[
				private String createDocument(Database database) {

					// Create a new document and add data
					Document document = database.createDocument();

					String documentId = document.getId();

					Map<String, Object> map = new HashMap<String, Object>();
					map.put("name", "Big Party");
					map.put("location", "My House");

					try {
							// Save the properties to the document
							document.putProperties(map);

					} catch (CouchbaseLiteException e) {

					Log.e(TAG, "Error putting", e);
					}

					return documentId;
				}
						]]></code-block>
						<paragraph><code>HashMap</code> objects provide JSON-compatible representations of
							data that are suitable for creating documents that you can be stored in the
							database. The content for the document created by this snippet is created in a
							<code>HashMap</code> object named <code>map</code> that contains these
							keys: <code>message</code> and <code>currentTimeString</code>. Each key has a
							value associated with it. The value for the <code>name</code> key contains
							the string &#8220;Big Party&#8221;, and the value for
							the <code>currentTimeString</code> key contains the time and date the document
							was created.</paragraph>
						<paragraph>
							The code snippet creates an empty <code>Document</code> object named
							<code>document</code> that is saved to the database by using the
							<code>Document</code> class <code>putProperties()</code> method. The
							<code>putProperties</code> method can throw an exception, so the call is placed
							in a <code>try</code> block.
							The putProperties method writes the contents of the map into the Document which actually
							saves the passed in <code>HashMap</code> to the Couchbase Lite database on the local device.
							We return the documentID so that the caller has the document ID for their records.
						</paragraph>
						<paragraph>
							When a document is saved to the database, Couchbase Lite generates a
							document identifier property named <code>_id</code> and a revision identifier
							property named <code>_rev</code>, which are added to the stored
							document.
						</paragraph>
					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>View the console output.</paragraph>
						<paragraph>The console output displays messages similar to the following ones that
							log the initial document content and the identifier that was assigned to it
							upon creation.</paragraph>
						<code-block>
							05-16 19:46:57.933  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ docContent={message=Hello Couchbase Lite, creationDate=2014-05-16T19:46:57.938Z}
							05-16 19:46:57.949  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ Document written to database named hello with ID = b4e23b69-0aad-4a66-9fd6-3b8fc64694d1
						</code-block>
					</list-item>
				</ordered-list>
			</body>
		</task>

		<task id="retrieve-document">
			<title>Retrieve a document</title>
			<body>
				<paragraph>This section of the HelloWorld tutorial code retrieves the document that was
					previously written to the database.</paragraph>
				<ordered-list>
					<list-item>
						<paragraph>Add the following code before the last log statement in the
							<code>onCreate</code> method: </paragraph>
						<code-block>
							// retrieve the document from the database
							Document retrievedDocument = database.getDocument(docID);

							// display the retrieved document
							Log.d(TAG, "retrievedDocument=" + String.valueOf(retrievedDocument.getProperties()));
						</code-block>
						<paragraph>This code snippet retrieves the document from the database by using the
							<code>Database</code> class <code>getDocument()</code> method. The content of
							the retrieved document is written out to the console to log its keys and
							values. The retrieved document includes the <code>_id</code> and
							<code>_rev</code> properties created by Couchbase Lite, in addition to the keys
							and values written by the HelloWorld code.</paragraph>
					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>View the console output.</paragraph>
						<paragraph>The console output displays a message similar to the following one that
							displays the retrieved document. In the console output you can see the added
							<code>_id</code> and <code>_rev</code> properties.</paragraph>
						<code-block>
							05-16 19:46:57.957  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ retrievedDocument={_rev=1-2bbfb53e244a0fec08f0e69edf2c044f, message=Hello Couchbase Lite, creationDate=2014-05-16T19:46:57.938Z, _id=b4e23b69-0aad-4a66-9fd6-3b8fc64694d1}
						</code-block>
					</list-item>
				</ordered-list>
			</body>
		</task>

		<task id="update-document">
			<title>Update a document</title>
			<body>
				<paragraph>This section of the HelloWorld tutorial code modifies the document that was
					previously written to the database.</paragraph>
				<ordered-list>
					<list-item>
						<paragraph>Add the following code before the last log statement in the
							<code>onCreate</code> method: </paragraph>
						<code-block>
							// update the document
							Map&lt;String, Object&gt; updatedProperties = new HashMap&lt;String, Object&gt;();
							updatedProperties.putAll(retrievedDocument.getProperties());
							updatedProperties.put ("message", "We're having a heat wave!");
							updatedProperties.put ("temperature", "95");

							try {
							retrievedDocument.putProperties(updatedProperties);
							Log.d(TAG, "updated retrievedDocument=" + String.valueOf(retrievedDocument.getProperties()));
							} catch (CouchbaseLiteException e) {
							Log.e (TAG, "Cannot update document", e);
							}
						</code-block>
						<paragraph>The code first makes a new <code>HashMap</code> object and copies the
							existing properties of <code>retrievedDocument</code> into it. Working on a
							copy of the document properties is helpful because to update a document
							successfully you need to include the current revision identifier. Then the code
							modifies the value of the <code>message</code> key and adds a new key,
							<code>temperature</code>.</paragraph>
						<paragraph>When a document is updated, Couchbase Lite creates a new revision of
							the document that contains a new revision identifier in the <code>_rev</code>
							property. The document identifier in <code>_id</code> always remains the
							same.</paragraph>
					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>View the console output.</paragraph>
						<paragraph>The console output displays a message similar to the following one that
							displays the updated document. The updated document contains the original
							<code>_id</code> value, a new <code>_rev</code> value, and the new and modified
							key-value pairs. </paragraph>
						<code-block>
							05-16 19:46:57.957  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ updated retrievedDocument={_rev=2-24a251c158a69a892d499d50761737d8, message=We're having a heat wave!, creationDate=2014-05-16T19:46:57.938Z, _id=b4e23b69-0aad-4a66-9fd6-3b8fc64694d1, temperature=95}
						</code-block>
					</list-item>
				</ordered-list>
			</body>
		</task>

		<task id="delete-document">
			<title>Delete a document</title>
			<body>
				<paragraph>This section of the HelloWorld tutorial code deletes the document that was
					previously written to the database.</paragraph>
				<ordered-list>
					<list-item>
						<paragraph>Add the following code before the last log statement in the
							<code>onCreate</code> method:</paragraph>
						<code-block>
							// delete the document
							try {
							retrievedDocument.delete();
							Log.d (TAG, "Deleted document, deletion status = " + retrievedDocument.isDeleted());
							} catch (CouchbaseLiteException e) {
							Log.e (TAG, "Cannot delete document", e);
							}
						</code-block>

						<paragraph>The document is deleted by calling the <code>delete()</code> method on <code>retrievedDocument</code>. Then to verify the deletion, it logs the value returned by the <code>isDeleted()</code> method.</paragraph>

					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>View the console output.</paragraph>
						<paragraph>The console output displays a message similar to the following one that
							says the document was deleted.</paragraph>
						<code-block>
							05-16 19:46:57.961  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ Deleted document, deletion status = true
						</code-block>
					</list-item>
				</ordered-list>
			</body>
		</task>

	</tasks>
</lesson>

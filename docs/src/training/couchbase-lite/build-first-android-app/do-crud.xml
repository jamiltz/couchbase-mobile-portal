<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="do-crud">
	<title>Performing CRUD operations</title>
	<description>Create, retrieve, update, and delete documents in the HelloWorld database</description>
	<introduction>
		<paragraph>
			CRUD operations represent the basic interactions with a Couchbase Lite database.
			This section demonstrates how to create, retrieve, update, and delete documents. The
			tutorial code creates just one document and then in turn retrieves it, updates it, and
			finally deletes it.
		</paragraph>
		<paragraph>
			In this section, you add code to the <code>MainActivity</code> class.
		</paragraph>
	</introduction>

	<tasks>

		<task id="create-document">
			<title>Create a document</title>
			<body>
				<paragraph>
					This section of the tutorial code generates some data for a new
					document, and then creates the new document and writes it to the database. It also
					outputs some messages to the console.
				</paragraph>
				<ordered-list>
					<list-item>
						<paragraph>
							Add the following code before the last log statement in the <code>onCreate</code> method:
						</paragraph>
						<code-block language="java"><![CDATA[
							private String createDocument(Database database) {

								// Create a new document and add data
								Document document = database.createDocument();

								String documentId = document.getId();

								Map<String, Object> map = new HashMap<String, Object>();
								map.put("name", "Big Party");
								map.put("location", "My House");

								try {
										// Save the properties to the document
										document.putProperties(map);

								} catch (CouchbaseLiteException e) {

								Log.e(TAG, "Error putting", e);
								}

								return documentId;
							}
						]]></code-block>
						<paragraph>
							<code>HashMap</code> objects provide JSON-compatible representations of
							data that are suitable for creating documents that can be stored in the
							database. The content for the document created by this snippet is created in a
							<code>HashMap</code> object named <code>map</code> that contains these
							keys: <code>name</code> and <code>location</code>. Each key has a
							value associated with it. The value for the <code>name</code> key contains
							the string &#8220;Big Party&#8221;, and the value for
							the <code>location</code> key contains the location the event is held at.
						</paragraph>
						<paragraph>
							The code snippet creates an empty <code>Document</code> object named
							<code>document</code> that is saved to the database by using the
							<code>Document</code> class <code>putProperties()</code> method. The
							<code>putProperties</code> method can throw an exception, so the call is placed
							in a <code>try</code> block.
							The <code>putProperties</code> method writes the contents of the map into the Document which actually
							saves the passed in <code>HashMap</code> to the Couchbase Lite database on the local device.
							We return the documentID so that the caller has the document ID for their records.
						</paragraph>
						<paragraph>
							When a document is saved to the database, Couchbase Lite generates a
							document identifier property named <code>_id</code> and a revision identifier
							property named <code>_rev</code>, which are added to the stored
							document.
						</paragraph>
					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>View the console output.</paragraph>
						<paragraph>The console output displays messages similar to the following ones that
							log the initial document content and the identifier that was assigned to it
							upon creation.</paragraph>
						<code-block>
							05-16 19:46:57.933  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ docContent={message=Hello Couchbase Lite, creationDate=2014-05-16T19:46:57.938Z}
							05-16 19:46:57.949  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ Document written to database named hello with ID = b4e23b69-0aad-4a66-9fd6-3b8fc64694d1
						</code-block>
					</list-item>
				</ordered-list>
			</body>
		</task>

		<task id="retrieve-document">
			<title>Retrieve a document</title>
			<body>
				<paragraph>
					In this section, we will retrieve the document that was previously written to the database.
				</paragraph>
				<ordered-list>
					<list-item>
						<paragraph>
							Add the following code before the last log statement in the
							<code>onCreate</code> method:
						</paragraph>
						<code-block>
							// retrieve the document from the database
							Document retrievedDocument = database.getDocument(docID);

							// display the retrieved document
							Log.d(TAG, "retrievedDocument=" + String.valueOf(retrievedDocument.getProperties()));
						</code-block>
						<paragraph>
							This code snippet retrieves the document from the database by using the
							<code>Database</code> class <code>getDocument()</code> method. The content of
							the retrieved document is written out to the console to log its keys and
							values. The retrieved document includes the <code>_id</code> and
							<code>_rev</code> properties created by Couchbase Lite, in addition to the keys
							and values that were saved in the previous section.
						</paragraph>
					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>
							View the console output.
						</paragraph>
						<paragraph>
							The console output displays a message similar to the following one that
							displays the retrieved document. In the console output you can see the added
							<code>_id</code> and <code>_rev</code> properties.
						</paragraph>
						<code-block>
							05-16 19:46:57.957  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ retrievedDocument={_rev=1-2bbfb53e244a0fec08f0e69edf2c044f, message=Hello Couchbase Lite, creationDate=2014-05-16T19:46:57.938Z, _id=b4e23b69-0aad-4a66-9fd6-3b8fc64694d1}
						</code-block>
					</list-item>
				</ordered-list>
			</body>
		</task>

		<task id="update-document">
			<title>Update a document</title>
			<body>
				<paragraph>
					This section of the tutorial code modifies the document that was
					previously written to the database.
				</paragraph>

				<paragraph>
					To update an existing document, you will need the key, let’s take a look:
				</paragraph>

				<code-block language="java"><![CDATA[
				 private void updateDoc(Database database, String documentId) {

				Document document = database.getDocument(documentId);

					try {
						// Update the document with more data
						Map<String, Object> updatedProperties = new HashMap<String, Object>();

						updatedProperties.putAll(document.getProperties());

						updatedProperties.put("eventDescription", "Everyone is invited!");

						updatedProperties.put("address", "123 Elm St.");

						// Save to the Couchbase local Couchbase Lite DB
						document.putProperties(updatedProperties);

					} catch (CouchbaseLiteException e) {
							Log.e(TAG, "Error putting", e);
					}
				}
				]]>
				</code-block>

				<paragraph>
					We first need to retrieve the original document before we can update its content, and given the
					Database and documentId, we can retrieve the document. The code first makes a new
					<code>HashMap</code> object and copies the existing properties of <code>retrievedDocument</code>
					into it. Working on a copy of the document properties is helpful because to update a document
					successfully you need to include the current revision identifier. Then the code
					adds the value for <code>eventDescription</code> key and <code>address</code>.
					IMPORTANT: It would be easy to think that all that happens here is that the Document object is
					updated with data, but in fact this causes that document to be stored in the local database. This
					is also different from the data being replicated to the Sync Gateway. So far, there is no Sync
					Gateway involved. We will cover that later. This is currently all local data on the device only.
				</paragraph>

				<paragraph>
					When a document is updated, Couchbase Lite creates a new revision of
					the document that contains a new revision identifier in the <code>_rev</code>
					property. The document identifier in <code>_id</code> always remains the
					same.
				</paragraph>

				<paragraph>
					Build and run the app.
				</paragraph>

				<paragraph>
					View the console output.
				</paragraph>

				<paragraph>
					The console output displays a message similar to the following one that displays the updated
					document. The updated document contains the original <code>_id</code> value, a new
					<code>_rev</code> value, and the new and modified key-value pairs.
				</paragraph>

				<code-block>
					05-16 19:46:57.957  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ updated retrievedDocument={_rev=2-24a251c158a69a892d499d50761737d8, message=We're having a heat wave!, creationDate=2014-05-16T19:46:57.938Z, _id=b4e23b69-0aad-4a66-9fd6-3b8fc64694d1, temperature=95}
				</code-block>

			</body>
		</task>

		<task id="adding-attachment">
			<title>Adding an attachment</title>
			<body>
				<paragraph>
					we will look carefully at creating an Attachment to that document.
					Attachments will currently only be made available to the Couchbase Lite API using them.
				</paragraph>

				<code-block language="java"><![CDATA[
					private void addAttachment(Database database, String documentId) {

						Document document = database.getDocument(documentId);

						try {
							/* Add an attachment with sample data as POC */
							ByteArrayInputStream inputStream = new ByteArrayInputStream(new byte[] { 0, 0, 0, 0 });

							UnsavedRevision revision = document.getCurrentRevision().createRevision();

							revision.setAttachment("binaryData", "application/octet-stream", //MIME type inputStream);

							/* Save doc & attachment to the local DB */
							revision.save();

						} catch (CouchbaseLiteException e) {
							Log.e(TAG, "Error putting", e);
						}
					}
				]]>
				</code-block>

				<paragraph>
					We start by fetching the document to which we wish to attach the binary data. Then we create a
					ByteArrayInputStream to hold our binary (attachment) data. Of course this is mock data, but it
					satisfies our proof of concept. Then we get the current revision of the document, since the document
					could have been modified since we last read it, and we want the latest and greatest data.
					We use the document factory methods to request that UnsavedRevision which we wish to update
					with an attachment. The UnsavedRevision method <code>setAttachment(…)</code> let’s us place the
					stream we created on the Document.
				</paragraph>

				<paragraph>
					Note we need to pass three parameters:
				</paragraph>

				<unordered-list>
					<list-item>
						The name of the attachment (multiple attachments are allowed)
					</list-item>
					<list-item>
						The MIME (Multipurpose Internet Mail Extensions) type (<ref href="http://en.wikipedia.org/wiki/Internet_media_type#List_of_common_media_types">see more</ref>)
					</list-item>
					<list-item>
						The java.io.InputStream (or sub-type). The attachment data will be written to the Database when
						the UnsavedRevision is saved.
					</list-item>
				</unordered-list>

				<paragraph>
					Then we invoke the <code>save()</code> method to save the Document and it’s attachment to the Database locally.
				</paragraph>

				<paragraph>
					Once we have a document with an attachment, we will want to retrieve the attachment using
					the CBL API. Let’s see how:
				</paragraph>

				<code-block language="java"><![CDATA[
					Document fetchedSameDoc = getDatabaseInstance().getExistingDocument(getDocId());

					SavedRevision saved = fetchedSameDoc.getCurrentRevision();

					// The content of the attachment is a byte[] we created
					Attachment attach = saved.getAttachment("binaryData");

					int i = 0;
					BufferedReader reader = new BufferedReader(new InputStreamReader(attach.getContent()));

					StringBuffer values = new StringBuffer();
					while (i++ < 4) {
						// We knew the size of the byte array
						// This is the content of the attachment
						values.append(reader.read() + " ");
					}

					Log.v("LaurentActivity", "The docID: " + getDocId() + ", attachment contents was: " + values.toString());
				]]>
				</code-block>

				<paragraph>
					To better understand our code, let’s start with the Document <code>fetchedSameDoc</code>,
					which represents the document you want to grab with the attachment you just put there. It is the
					same document, so given the document ID we can easily fetch it with the
					<code>getExistingDocument(…)</code> method of the Database instance. From the document, we want to
					make sure we have the most current revision, and since we saved it previously, it is a SavedRevision
					instance. As long as we know the unique name of the attachment on that SavedRevision, we can ask for
					the attachment using the <code>getAttachment(“name”)</code> method, to retrieve the Attachment
					object. The attachment <code>getContent()</code> method returns the InputStream we placed on the
					document as the actual attachment. We can wrap the returned InputSteam with an InputSteamReader,
					and wrap a BufferedReader around that to read the data from the attachment into a StringBuffer
					for display.
				</paragraph>

			</body>
		</task>

		<task id="delete-document">
			<title>Delete a document</title>
			<body>
				<paragraph>
					This section of the tutorial code deletes the document that was previously written to the database.
				</paragraph>
				<ordered-list>
					<list-item>
						<paragraph>Add the following code before the last log statement in the
							<code>onCreate</code> method:
						</paragraph>

						<code-block>
							// delete the document
							try {
							retrievedDocument.delete();
							Log.d (TAG, "Deleted document, deletion status = " + retrievedDocument.isDeleted());
							} catch (CouchbaseLiteException e) {
							Log.e (TAG, "Cannot delete document", e);
							}
						</code-block>

						<paragraph>
							The document is deleted by calling the <code>delete()</code> method on
							<code>retrievedDocument</code>. Then to verify the deletion, it logs the value returned by
							the <code>isDeleted()</code> method.
						</paragraph>
					</list-item>
					<list-item>
						Build and run the app.
					</list-item>
					<list-item>
						<paragraph>View the console output.</paragraph>
						<paragraph>The console output displays a message similar to the following one that
							says the document was deleted.</paragraph>
						<code-block>
							05-16 19:46:57.961  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ Deleted document, deletion status = true
						</code-block>
					</list-item>
				</ordered-list>
			</body>
		</task>

		<task id="the-event-class">
			<title>The Event model</title>
			<body>
				<paragraph>
					In the real world, all this insert, update, read and delete work would be performed in some type of
					CrudRepository, such as EventRepository when working with Events.
				</paragraph>

				<paragraph>
					Here is the Event class:
				</paragraph>

				<code-block language="java"><![CDATA[
				package com.example.couchbaseevents;

						public class Event {

							public Event(String name, String address, String description, String date, String time, String eventType) {
								super();
								this.name = name;
								this.address = address;
								this.description = description;
								this.date = date;
								this.time = time;
								this.eventType = eventType;

								System.out.println("\nWe have created a POJO Event...");
							}

							public Event() {

								/* For SerDe to and from JSON... */
							}

							private String name;
							private String address;
							private String description;
							private String date;
							private String time;
							private String eventType;
							private String _id; // Document ID
							private String _rev; // Current revision

							private String url; //Optional

							public String getName() {
								return name;
							}
							public void setName(String name) {
								this.name = name;
							}
							public String getAddress() {
								return address;
							}
							public void setAddress(String address) {
								this.address = address;
							}
							public String getDescription() {
								return description;
							}
							public void setDescription(String description) {
								this.description = description;
							}
							public String getDate() {
								return date;
							}
							public void setDate(String date) {
								this.date = date;
							}
							public String getTime() {
								return time;
							}
							public void setTime(String time) {
								this.time = time;
							}
							public String getEventType() {
								return eventType;
							}
							public void setEventType(String eventType) {
								this.eventType = eventType;
							}
							public String get_id() {
								return _id;
							}
							public void set_id(String _id) {
								this._id = _id;
							}
							public String get_rev() {
								return _rev;
							}
							public void set_rev(String _rev) {
								this._rev = _rev;
							}
							public String getUrl() {
								return url;
							}
							public void setUrl(String url) {
								this.url = url;
							}
						}
				]]>
				</code-block>

			</body>
		</task>

		<task id="event-repository">
			<title>The Event repository</title>
			<body>

				<paragraph>
					If we have an Event, we would create an EventRepository with CRUD methods for each Document like:
				</paragraph>

				<code-block language="java"><![CDATA[
					public Event save(Event event) 	{ /* Create code */}
					public Event getById(String docId) 	{ /* Read code */}
					public Event update(Event event) 	{ /* Update code */}
					public boolean delete(Event event) 	{ /* Delete code */}
					public boolean exists(String docId) { /* Exists code */}
				]]>
				</code-block>

				<paragraph>
					Here is some example EventRepository update(…) code:
				</paragraph>

				<code-block language="java"><![CDATA[
					public Event update(Event event) throws CouchbaseLiteException {

						String docId = event.get_id();
						Document updateDoc = db.getExistingDocument(docId);

						if (updateDoc != null) {

							Map<String, Object> updateMap = new HashMap<String, Object>();

							/* add Event data to updateMap */
							updateMap.put("name", event.getName());
							updateMap.put("address", event.getAddress());
							updateMap.put("description", event.getDescription());
							updateMap.put("date", event.getDate());
							updateMap.put("time", event.getTime());
							updateMap.put("eventType", event.getEventType());
							updateMap.put("_id", docId);
							updateMap.put("_rev", event.get_rev());
							updateMap.put("url", event.getUrl());

							/* Saves this data to local Couchbase Lite db */
							SavedRevision revision = updateDoc.putProperties(updateMap);

							/* here we set the revision id value... */
							event.set_rev(updateDoc.getCurrentRevisionId());

						}

						return event;
					}
				]]>
				</code-block>

				<paragraph>
					Now documents are created and saved to database on the mobile device with Couchbase Lite.  Using ‘revision.save()’ when saving documents and adding attachments, the data is saved on the local Couchbase Lite database.  Next, we will see how data is pushed to Sync Gateway using the push replicator.
				</paragraph>

			</body>
		</task>

	</tasks>
</lesson>

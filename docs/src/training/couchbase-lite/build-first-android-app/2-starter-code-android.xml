<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="starter-code-android">
	<title>Creating the manager and a database</title>
	<description>Create a manager and a database for CouchbaseEvents</description>
	<introduction>
		<paragraph>
			To get started with the CouchbaseEvents app code, you need to import Couchbase Lite packages
			and add a bit of initial code. After you have the initial code in place, you can build and
			run the app.
		</paragraph>

		<paragraph>
			Every Couchbase Lite application needs a manager object, which manages access to databases. This section
			shows you how to create the manager and a database.
		</paragraph>

		<paragraph>
			When following along, you add all the sample code included in this section to the <code>MainActivity</code> class.
		</paragraph>
	</introduction>

	<tasks>
		
		<task id="initial-code">
			<title>Add initial code</title>
			<body>
				<paragraph>
					The initial code sets up a constant, <code>TAG</code>, for the console logging messages that mark the progress of this simple app and outputs some log messages. Add the following statements at the beginning of the <strong>MainActivity</strong>
					class:
				</paragraph>
<code-block language="java">
final String TAG = "CouchbaseEvents";
Log.d(TAG, "Begin Couchbase Events App");

Log.d(TAG, "End Couchbase Events App");
</code-block>
			</body>
		</task>

		<task id="build-run">
			<title>Build and run the app</title>
			<body>
				<paragraph>
					Build and run the app. If you filter the logcat output on the string<code>CouchbaseEvents</code>, you'll see only the logging messages output by the CouchbaseEvents app. Look for logging messages similar to these in the logcat:
				</paragraph>
<code-block>
05-16 19:46:57.925  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ Begin Hello World App
05-16 19:46:57.961  31719-31719/com.couchbase.helloworld D/HelloWorld﹕ End Hello World App					
</code-block>
				
				
			</body>
		</task>

		<task id="getting-started">
			<title>Events Apps</title>
			<body>
				<paragraph>
					Now we have gotten the local database running, we are going to look into creating an events applications with Couchbase Lite.  The app we are going to create is an events app that will have the information of an event where a user is able to update the fields accordingly.

					We assume you are already familiar with the android app Activity life-cycle methods:
				</paragraph>

				<code-block language="java"><![CDATA[
                    onCreate()
                    onStart()
                    onDestroy()
                    onPause()
                    onResume()
                    onRestart()
                    onStop()
                ]]>
				</code-block>

				<paragraph>
					If not, be sure to research on each of their functionality over at Android Developer portal.
				</paragraph>

				<paragraph>
					Before we modify the provided CouchbaseEvents code, we will explore the base level code to gain a better understanding.  This application is based on events the user would create, such as ‘party’, or a ‘rock concert’ they wish to attend:
				</paragraph>

				<paragraph>
					This code will extend an android.app.Activity:
				</paragraph>

				<code-block language="java"><![CDATA[
                    public class CouchbaseEventsActivity extends ActionBarActivity {
                    	public static final String DB_NAME = "couchbaseevents";
                    	public static final String TAG = "couchbaseevents";

                    	@Override
                    	protected void onCreate(Bundle savedInstanceState) {
                    		super.onCreate(savedInstanceState);
                    		setContentView(R.layout.activity_main);

                    		helloCBL();
                    }
                ]]>
				</code-block>
			</body>
		</task>

		<task id="oncreate-method">
			<title>The onCreate method</title>
			<body>
				<paragraph>
					The onCreate() method above is overridden to invoke our HelloCBL method, which is the focus of this tutorial and where the primary functionalities of Couchbase Lite resides.
				</paragraph>

				<code-block language="java"><![CDATA[
                private void helloCBL() {
                    Manager manager = null;
	                Database database = null;

	                try {
	                	manager = new Manager(new AndroidContext(this), Manager.DEFAULT_OPTIONS);
	                	database = manager.getDatabase(DB_NAME);
	                } catch (Exception e) {
	                	Log.e(TAG, "Error getting database", e);
	                	return;
	                }

	                // Create the document
	                String documentId = createDocument(database);

	                /* Get and output the contents */
	                outputContents(database, documentId);

	                /* Update the document and add an attachment */
	                updateDoc(database, documentId);

	                // Add an attachment
	                addAttachment(database, documentId);

                    /* Get and output the contents with the attachment */
                    outputContentsWithAttachment(database, documentId);
                }
                ]]>
				</code-block>

				<paragraph>
					Including com.couchbase.lite.Manager class is where we begin.  The AndroidContext and ManagerOptions is required to be passed to the constructor.
				</paragraph>

				<paragraph>
					Instantiate the Manager class to use the reference to invoke the factory method ‘manager.getDatabase()’.  From there you would obtain a com.couchbase.lite.Database which is provided  through a database variable named, “couchbaseevennts” for the events planning and management app.
				</paragraph>

			</body>
		</task>

		<task id="manager-and-database-as-singleton">
			<title>
				Manager and Database as singleton
			</title>
			<body>
				<paragraph>
					We will follow best practices and make the Manager and Database references available to the rest of the Android app as a Singleton. You may read more on why having a Singleton is a better approach over on the Couchbase Mobile Blog.
				</paragraph>

				<code-block language="java"><![CDATA[
                    public Database getDatabaseInstance() throws CouchbaseLiteException {
                        if ((this.database == null) & (this.manager != null)) {
                            this.database = manager.getDatabase(DB_NAME);
                        }
                        return database;
                    }

                    public Manager getManagerInstance() throws IOException {
                        if (manager == null) {
                            manager = new Manager(new AndroidContext(this), Manager.DEFAULT_OPTIONS);
                        }
                        return manager;
                    }
                ]]>
				</code-block>
			</body>
		</task>

	</tasks>
</lesson>

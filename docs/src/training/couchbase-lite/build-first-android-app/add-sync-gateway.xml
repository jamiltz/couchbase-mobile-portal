<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="add-sync-gateway.xml">
	<title>Add Sync Gateway</title>
	<description>Understanding Sync Gateway and setting up a connection to Couchbase Server</description>
	<introduction>
		<paragraph>
			Now with Couchbase Lite working on our mobile client device, we will want to communicate with the Couchbase Server.  We will have to first establish a connection to the Sync Gateway.  With this connection, we will begin to achieve our data Replication Strategy.  There will be PUSH and PULL options on the replication data to and from Couchbase Server.
		</paragraph>
		<paragraph>Without Sync Gateway, Couchbase Lite API will not be able to communicate with Couchbase Server.  Sync Gateway is a required middle tier that resides on its own server and not on a Couchbase cluster node.  The steps below outline how we are going to get setup with Sync Gateway.</paragraph>
	</introduction>
	<tasks>

		<task id="install-sg">
			<title>Install Sync Gateway</title>
			<body>
				<ordered-list>
					<list-item>
						<paragraph>
							The Sync Gateway is required to synchronize data on the mobile device with Couchbase Server instance residing on the network cluster that has been installed.  Install an instance of Sync Gateway to act as the middle-tier for replicating data off from the device(s) to the server and also for the server to replicate data back to the device(s) on any changes that occurred remotely.  We can add our data replication code to our mobile application to sync data to the server after Sync Gateway is installed and running.  To Run Sync Gateway:
						</paragraph>

						<paragraph>1.  Open a terminal or command prompt and change to the directory where you extracted the Sync Gateway download. </paragraph>
						<paragraph>2.  Change directories to the “bin” directory. </paragraph>
						<paragraph>3.  Make a new directory under the bin directory called “data.” </paragraph>
						<paragraph>4.  Create a file in the bin directory called “config.json.” </paragraph>
						<paragraph>5.  Change the config.json contents to be:</paragraph>

						<code-block language="java">
							{
								"log":["CRUD+", "REST+", "Changes+", "Attach+"],
								"databases": {
									"couchbaseevents": {
										"server":"walrus:data",
										"sync":`
											function (doc) {
											channel (doc.channels);
										}`,
										"users": {
											"GUEST": {
												"disabled": false,
												"admin_channels": ["*"]
											}
										}
									}
								}
							}

						</code-block>
						<paragraph>
							The config.json configures the Sync Gateway to use an in-memory database called ‘Walus’ database for development and testing purposes as oppose to using Couchbase Server when in production.
						</paragraph>

						<paragraph>
							Walrus is a memory-only database used for development and unit testing.  Should not be used for production
							Walrus resides on the Sync Gateway server rather than Couchbase Server for development purposes.  The data does not reach the Couchbase Server instance when Walrus is in use.
						</paragraph>

					</list-item>
				</ordered-list>
			</body>
		</task>

		<task id="run-sg">
			<title>Run Sync Gateway</title>
			<body>
				<paragraph>
					The “databases” child element, gives the name of the bucket.  This value needs to match the name of the database in our client-side Couchbase Mobile Lite code.</paragraph>

					<paragraph> Change the directories to the bin directory:  couchbase-sync-gateway/bin </paragraph>
					<paragraph> Run command on Linux/OS-X:   ./sync_gateway config.json  </paragraph>


					<code-block language="java">
						// provide image
					</code-block>
					<paragraph>Within terminal, you will see “Starting server on: 4984” when your Sync Gateway is running after executing the command.   Keep the terminal open as you would need to re-start the Sync Gateway if closed or exited.</paragraph>

					<paragraph>In production, all Mobile devices running Couchbase Lite are connected to the Couchbase Server through the Sync Gateway.</paragraph>

			</body>
		</task>

		<task id="bi-directional-replication">
			<title>Bi-Directional Replication of Data (Push and Pull).</title>
			<body>
				<paragraph>
					Now that we have our application data on the mobile devices, and Sync Gateway, we need to carefully consider where that data should live, and how we want to incorporate new data from other mobile devices. Use Cases are naturally different, so we will not say, “you should always do…” but rather, here is how you will do what you wish. There are two main flavors of mobile replication in Couchbase: push and pull, from the perspective of the mobile device. Should we be pushing our new data to the Couchbase Server? Or should we be pulling new data from the Couchbase Server, or both? Should we be doing this continually or on an as needed basis? These are some of the many design considerations before our solution can be written.
				</paragraph>

				<paragraph>
					Replication can be a one-shot, per method invocation. Or it can be continuous, whereby a separate Thread is spawned to continuously invoke the replication method for you.
				</paragraph>

				// show a diagram of the push/pull replication

				<paragraph>
					So, now let’s see how we can get the replication code working, and round trip this data from the mobile device to the Couchbase Server and back again:
				</paragraph>

				<paragraph>
					First we need to configure Android with the right permissions. In AndroidManifest.xml:
				</paragraph>

				<code-block language="xml"><![CDATA[
					<uses-permission  android:name="android.permission.INTERNET"/>
				]]>
				</code-block>

				<paragraph>
					Next we need to create a Sync URL for use by the Couchbase Lite API. Also, both the PUSH as well as the PULL replication strategies require this URL, so we can easily encapsulate this work in factory method:
				</paragraph>

				<code-block language="java"><![CDATA[
					private URL createSyncURL(boolean isEncrypted){

					URL syncURL = null;
						String dns = null;

					/* Example URL: "http://10.0.2.2:4984/couchbaseevents" */

						if (isEncrypted) {
						dns = "https://10.0.2.2"; //Encrypted Sync Gateway DNS
						}
						else {
							dns = "http://10.0.2.2"; //Sync Gateway DNS
						}

						String port = "4984"; // Sync Gateway data port
						String dbName = "couchbaseevents";

						try {

						syncURL = new URL(dns + ":" + port + "/" + dbName);

					}catch (MalformedURLException me) {

							me.printStackTrace();
						}
						return syncURL;
					}

				]]>
				</code-block>

				<paragraph>
					Now to start a Pull replication:
				</paragraph>

				<code-block language="java"><![CDATA[
					private void startPullReplication() throws CouchbaseLiteException {

						Replication pull = this.getDatabaseInstance().createPullReplication(this.createSyncURL(false));

						/* actually causes a Thread to be instantiated */
						pull.setContinuous(true); //false is default

						/* setContinuous(true) was invoked so
					 	it starts a Thread for continuous replication*/
						pull.start();
					}

				]]>
				</code-block>

				<paragraph>
					1.	Let’s take a closer look at our code. We start by invoking our Database instance Replication factory method createPullReplication(…) and passing over our Sync URL.
				</paragraph>

				<paragraph>
					1.	Now that we have a Replication object, of type PULL, we can start it. We have a choice to make it a one shot replication or continuous replication:
					a.	One shot replication means that setContinuous(false) is present.
					b.	Continuous replication is only possible by setContinuous(true) and then starting that thread with the start() method.
					2.	The PUSH Replication is identical except that the method createPushReplication(…) is invoked instead. The rest of the code is the same so we won’t show that here.
					3.	It is possible to add authentication to the Sync Gateway, we will cover that later.
				</paragraph>

			</body>
		</task>

		<task id="adding-authorization">
			<title>Adding Sync Gateway Authorization.</title>
			<body>
				<paragraph>
					Many Use Cases require an authentication and authorization policy on data replication. Sync Gateway provides a mechanism for this.
				</paragraph>

				<paragraph>
					A.	We can add a security layer to the Sync Gateway, both at the server layer and within our code.
					B.	In order to accomplish this we need to take a number of steps, beginning with stopping the Sync Gateway server, naturally.
					C.	Then we need to configure our security. Locate the config.json file and modify its contents to read:
				</paragraph>

				<code-block language="javascript"><![CDATA[
					{
					"log":["CRUD+", "REST+", "Changes+", "Attach+"],
					"databases": {
						"couchbaseevents": {
							"server":"walrus:data",
								"sync":`
									function (doc) {
										channel (doc.channels);
									}`,

									"users": {
										"GUEST": {"disabled": true,
											"admin_channels": ["*"]}
									}
						}
					  }
					}
				]]>
				</code-block>

				<paragraph>
					1.	Let’s notice that the change here is the GUEST disabled value changes to true, this will force authentication and disallow guest access.
					2.	Now all applications wanting authorization to use the Sync Gateway must first authenticate.
					3.	Restart the Sync Gateway as per the previous instructions in the section on Sync Gateway.
					4.	Restart your Android application and notice attempts to use the Sync Gateway should be throwing errors such as:
					“Unauthorized… HTTP:#004: ­­>401Loginrequired (0.0ms)”
					5.	It’s good that we have errors, this means the security is working! Now we will need to add an authorized user to the Sync Gateway and our codebase as well.
					a.	We will use the Sync Gateway REST Admin interface (Port #4985) to add a user. Let’s do this now.
					b.	Open the terminal window and issue the following curl command:
				</paragraph>

				<code-block language="bash"><![CDATA[
					curl ­X POST http://127.0.0.1:4985/couchbaseevents/_user/ ­d '{"name":"laurent8","password":"meher056"}' ­H "Content­Type: application/json"
				]]>
				</code-block>

				<paragraph>
					a.	That command created a new user with the username “laurent8” and the password “meher056”. This is the same username and password you will need to authenticate with in your Android code using the API com.couchbase.lite.auth.Authenticator.
					b.	Let’s make sure the PUSH and PULL Replication strategy that we created are now able to authenticate.
					c.	Add the following code to your android.app.Activity onCreate(…) method:
					i.	authenticator = AuthenticatorFactory.
					createBasicAuthenticator("laurent8", "meher056");
					d.	Add an instance variable to hold the Authenticator itself:
					i.	Authenticator authenticator = null;
					e.	Modify your replication methods, before invoking the pull.start() method, invoke setAuthenticator(…):
					i.	pull.setAuthenticator(authenticator);
					f.	Perform the same step for the push replication method.
					g.	Now both pull and push replication should be working securely.
				</paragraph>

			</body>
		</task>

	</tasks>
</lesson>

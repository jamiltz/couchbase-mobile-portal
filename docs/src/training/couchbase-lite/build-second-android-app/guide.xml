<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../docs.xsd"
        id="build-your-second-android-app">
    <title>Build your second Couchbase Lite Android app</title>
    <description>
        Guide to build your second Android app
    </description>
    <introduction>
        <paragraph>
            More description
        </paragraph>
    </introduction>
    <tasks>
        <task id="getting-started">
            <title>Introduction</title>
            <body>
                <paragraph>
                    The app we are going to create is an events app that will have the information of an event where a user is able to update the fields accordingly.

                    We assume you are already familiar with the android app Activity life-cycle methods:
                </paragraph>

                <code-block language="java"><![CDATA[
                    onCreate()
                    onStart()
                    onDestroy()
                    onPause()
                    onResume()
                    onRestart()
                    onStop()
                ]]>
                </code-block>

                <paragraph>
                    If not, be sure to research on each of their functionality over at:  Xxxxx
                </paragraph>

                <paragraph>
                    Before we modify the provided CouchbaseEvents code, we will explore the base level code to gain a better understanding.  This application is based on events the user would create, such as ‘party’, or a ‘rock concert’ they wish to attend:
                </paragraph>

                <paragraph>
                    This code will extend an android.app.Activity:
                </paragraph>

                <code-block language="java"><![CDATA[
                    public class HelloWorldActivity extends ActionBarActivity {
                    	public static final String DB_NAME = "couchbaseevents";
                    	public static final String TAG = "couchbaseevents";

                    	@Override
                    	protected void onCreate(Bundle savedInstanceState) {
                    		super.onCreate(savedInstanceState);
                    		setContentView(R.layout.activity_main);

                    		helloCBL();
                    }
                ]]>
                </code-block>
            </body>
        </task>

        <task id="oncreate-method">
            <title>The onCreate method</title>
            <body>
                <paragraph>
                    The onCreate() method is overridden to invoke our HelloCBL method, which is the focus of this tutorial. (action is) and where the primary functionalities of Couchbase Lite resides.
                </paragraph>

                <code-block language="java"><![CDATA[
                private void helloCBL() {
                    Manager manager = null;
	                Database database = null;

	                try {
	                	manager = new Manager(new AndroidContext(this), Manager.DEFAULT_OPTIONS);
	                	database = manager.getDatabase(DB_NAME);
	                } catch (Exception e) {
	                	Log.e(TAG, "Error getting database", e);
	                	return;
	                }

	                // Create the document
	                String documentId = createDocument(database);

	                /* Get and output the contents */
	                outputContents(database, documentId);

	                /* Update the document and add an attachment */
	                updateDoc(database, documentId);

	                // Add an attachment
	                addAttachment(database, documentId);

                    /* Get and output the contents with the attachment */
                    outputContentsWithAttachment(database, documentId);
                }
                ]]>
                </code-block>

                <paragraph>
                    Including com.couchbase.lite.Manager class is where we begin.  The AndroidContext and ManagerOptions is required to be passed to the constructor.
                </paragraph>

                <paragraph>
                    Instantiate the Manager class to use the reference to invoke the factory method ‘manager.getDatabase()’.  From there you would obtain a com.couchbase.lite.Database which is provided  through a database variable named, “couchbaseevennts” for the events planning and management app.
                </paragraph>

            </body>
        </task>

        <task id="manager-and-database-as-singleton">
            <title>
                Manager and Database as singleton
            </title>
            <body>
                <paragraph>
                    We will follow best practices and make the Manager and Database references available to the rest of the Android app as a Singleton. You may read more on why having a Singleton is a better approach over on the Couchbase Mobile Blog.
                </paragraph>

                <code-block language="java"><![CDATA[
                public Database getDatabaseInstance() throws CouchbaseLiteException{

                    if ((this.database == null) & (this.manager != null)) {

                    	if (Manager.isValidDatabaseName(DB_NAME) {

                    this.database =
                    manager.getDatabase(DB_NAME);
                    		}
                    	}
                    	return database;
                    }





                    public Manager getManagerInstance() throws IOException {

                    	if (manager == null) {

                    		manager = new Manager(new AndroidContext(this),
                    Manager.DEFAULT_OPTIONS);
                    	}

                    	return manager;
                }
                ]]>
                </code-block>
            </body>
        </task>

        <task id="the-event-class">
            <title>The Event model</title>
            <body>
                <paragraph>
                    In the real world, all this insert, update, read and delete work would be performed in some type of CrudRepository, such as EventRepository when working with Events.
                    Here is the Event class:
                </paragraph>

                <code-block language="java"><![CDATA[
                package com.example.couchbaseevents;

                        public class Event {

                        	public Event(String name, String address, String description, String date, String time, String eventType) {
                        		super();
                        		this.name = name;
                        		this.address = address;
                        		this.description = description;
                        		this.date = date;
                        		this.time = time;
                        		this.eventType = eventType;

                        		System.out.println("\nWe have created a POJO Event...");
                        	}
                        	public Event() {

                        		/* For SerDe to and from JSON... */
                        	}

                        	private String name;
                        	private String address;
                        	private String description;
                        	private String date;
                        	private String time;
                        	private String eventType;
                        	private String _id; // Document ID
                        	private String _rev; // Current revision

                        	private String url; //Optional

                        	public String getName() {
                        		return name;
                        	}
                        	public void setName(String name) {
                        		this.name = name;
                        	}
                        	public String getAddress() {
                        		return address;
                        	}
                        	public void setAddress(String address) {
                        		this.address = address;
                        	}
                        	public String getDescription() {
                        		return description;
                        	}
                        	public void setDescription(String description) {
                        		this.description = description;
                        	}
                        	public String getDate() {
                        		return date;
                        	}
                        	public void setDate(String date) {
                        		this.date = date;
                        	}
                        	public String getTime() {
                        		return time;
                        	}
                        	public void setTime(String time) {
                        		this.time = time;
                        	}
                        	public String getEventType() {
                        		return eventType;
                        	}
                        	public void setEventType(String eventType) {
                        		this.eventType = eventType;
                        	}
                        	public String get_id() {
                        		return _id;
                        	}
                        	public void set_id(String _id) {
                        		this._id = _id;
                        	}
                        	public String get_rev() {
                        		return _rev;
                        	}
                        	public void set_rev(String _rev) {
                        		this._rev = _rev;
                        	}
                        	public String getUrl() {
                        		return url;
                        	}
                        	public void setUrl(String url) {
                        		this.url = url;
                        	}
                        }
                ]]>
                </code-block>

            </body>
        </task>

        <task id="event-repository">
            <title>The Event repository</title>
            <body>

                <paragraph>
                    If we have an Event, we would create an EventRepository with CRUD methods for each Document like:
                </paragraph>

                <code-block language="java"><![CDATA[
                public Event save(Event event) 	{ /* Create code */}
                public Event getById(String docId) 	{ /* Read code */}
                public Event update(Event event) 	{ /* Update code */}
                public boolean delete(Event event) 	{ /* Delete code */}
                public boolean exists(String docId) { /* Exists code */}
                ]]>
                </code-block>

                <paragraph>
                    Here is some example EventRepository update(…) code:
                </paragraph>

                <code-block language="java"><![CDATA[
                    public Event update(Event event) throws CouchbaseLiteException {

            	String docId = event.get_id();
            	Document updateDoc = db.getExistingDocument(docId);

            	if (updateDoc != null) {

            		Map<String, Object> updateMap =
                new HashMap<String, Object>();

                /* add Event data to updateMap */
                		updateMap.put("name", event.getName());
                		updateMap.put("address", event.getAddress());
                		updateMap.put("description",
                event.getDescription());
                		updateMap.put("date", event.getDate());
                		updateMap.put("time", event.getTime());
                		updateMap.put("eventType", event.getEventType());
                		updateMap.put("_id", docId);
                		updateMap.put("_rev", event.get_rev());
                		updateMap.put("url", event.getUrl());

                /* Saves this data to local Couchbase Lite db */
                		SavedRevision revision =
                updateDoc.putProperties(updateMap);

                		/* here we set the revision id value... */
                		event.set_rev(updateDoc.getCurrentRevisionId());

                	}

                	return event;
                }
                ]]>
                </code-block>

                <paragraph>
                    Now documents are created and saved to database on the mobile device with Couchbase Lite.  Using ‘revision.save()’ when saving documents and adding attachments, the data is saved on the local Couchbase Lite database.  Next, we will see how data is pushed to Sync Gateway using the push replicator.
                </paragraph>

            </body>
        </task>

    </tasks>
</lesson>
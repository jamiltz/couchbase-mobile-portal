<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="couchbase-lite-views">
    <title>Working with Couchbase Views</title>
    <description>Introducing Views through code</description>
    <introduction>
        <paragraph>
            In Couchbase Server we have the notion of a View (or Index) created from a subset of Document data. Couchbase Lite also allows for View creation, however the View API is significantly different, and the resulting views are also stored differently. Let us find out how we can create and leverage views in Couchbase Lite.
        </paragraph>
    </introduction>

    <tasks>

        <task id="intro">
            <title>
                Introduction
            </title>
            <body>
                <paragraph>
                    Creating a View in Couchbase Lite is not maintained as a View in the Couchbase Server.  In Couchbase Lite, the View only exists on the mobile device.  We will use a <code>Couchbase.Lite.View</code> for our work here.
                </paragraph>
                <paragraph>    
                    There is a factory method on the Database called <code>GetView(“name”)</code> for creating this object. We must provide the database a unique name for each view. Let us encapsulate this work now for our application development:
                </paragraph>

                <code-block language="C#"><![CDATA[
                    Couchbase.Lite.View GetView (string name)
                    {
                        Couchbase.Lite.View cbView = null;
                        try {
                            cbView = db.GetView (name);
                        } catch (CouchbaseLiteException e) {
                            Console.WriteLine (e.StackTrace);
                            Debug.WriteLine("{0}: Cannot get view: {1}", TAG, e.StackTrace);
                        }
                        return cbView;
                    }
                ]]>
                </code-block>
            </body>
        </task>

        <task id="creating-view">
            <title>
                Creating a view
            </title>
            <body>
                <paragraph>
                    To create a View we simply pass the parameter name to the factory method and return the freshly created View.
                    Now that we have this method, we can write a specialized method per View for each View we wish to create.
                    For example, if we want to create a specialized view for <code>eventsByDate</code> we would write the method:
                </paragraph>

                <code-block language="C#"><![CDATA[
                    public Couchbase.Lite.View CreateEventsByDateView ()
                    {
                        var eventsByDateView = GetView ("eventsByDate");
                        eventsByDateView.SetMap ((doc, emit) => emit ((string)doc ["date"], null), "1");

                        return eventsByDateView;
                    }
                ]]>
                </code-block>

                <paragraph>
                    Within the <code>eventsByDateView</code> method above, we first leverage our <code>GetView</code> method to fetch a fresh View from the Database with the name 'eventsByDate' passed in.  
                </paragraph>
                <paragraph>
                Then we set the map function on the view, using <code>SetMap</code>. We pass <code>SetMap</code> a lambda expression that references the documents we wish to index and the emitter that will emit the data to the index.
                </paragraph>
                <paragraph>
                We are only interested in the document's date at this point, so we emit that date and null while providing a version number "1" for the map code.
                </paragraph>
            </body>
        </task>

        <task id="running-query">
            <title>Running a Query</title>
            <body>
                <paragraph>
                    Now that we have a view, we can use it to create a query. Let’s take a look at that code now:
                </paragraph>

                <paragraph>
                    The following code creates a query and prints the results to the log:
                </paragraph>

                <code-block language="C#"><![CDATA[
                    async void LogQueryResultsAsync (Couchbase.Lite.View cbView)
                    {
                        var orderedQuery = cbView.CreateQuery ();
                        orderedQuery.Descending = true;
                        orderedQuery.Limit = 20;

                        try {
                            var results = await orderedQuery.RunAsync ();

                            results.ToList ().ForEach (result => {
                                var doc = result.Document;

                                Debug.WriteLine("{0}: Found document with id: {1}, Date = {2}", TAG, 
                                    result.DocumentId, doc.GetProperty<string>("date"));
                            });

                        } catch (CouchbaseLiteException e) {
                            Debug.WriteLine("{0}: Error querying view": {1}", TAG, e.Message);
                        }
                    }
                ]]>
                </code-block>

                <paragraph>
                    First we need a Query object, which we can get from the View’s <code>CreateQuery</code> method.
                    In this case we want the newest eventss first, and the oldest ones last, so we set <code>orderedQuery.Descending = true</code>.
                    We also set the limit to 20, which is the maximum number of documents to return.
               </paragraph>
               <paragraph>
                    After a Query object is set up properly, you call its <code>Run</code> or <code>RunAsync</code> methods to get the results.
                    The results are returned as a QueryEnumerator object, which serves as an enumerable collection of QueryRow objects.  We can iterate over the results getting each QueryRow, from which we can obtain the document.
                    For more information on queries see the  
                    <external-ref href="http://developer.couchbase.com/mobile/develop/guides/couchbase-lite/native-api/query/index.html">Query API Refererence</external-ref>.
                </paragraph>
            </body>
        </task>

    </tasks>
</lesson>

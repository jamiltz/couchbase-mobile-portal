<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="do-crud">
	<title>Performing CRUD operations</title>
	<description>Create, retrieve, update, and delete documents in the couchbaseevents database</description>
	<introduction>
		<paragraph>
			CRUD operations represent the basic interactions with a Couchbase Lite database.
			This section demonstrates how to create, retrieve, update, and delete documents. The
			tutorial code creates just one document and then in turn retrieves it, updates it, and
			finally deletes it.
		</paragraph>
		<paragraph>
			In this section, you add code to the <code>MainWindow</code> class.
		</paragraph>
	</introduction>

	<tasks>

		<task id="create-document">
			<title>Create a document</title>
			<body>
				<paragraph>
					This section of the tutorial code generates some data for a new
					document, and then creates the new document and writes it to the database. It also
					outputs some messages to the console.
				</paragraph>
				<ordered-list>
					<list-item>
						<paragraph>
							Add the following method to to create a document, and call it from the <code>HelloCBL</code> method:
						</paragraph>
						<code-block language="C#"><![CDATA[
						string CreateDocument()
						{
						    var doc = db.CreateDocument();
						    string docId = doc.Id;

						    var props = new Dictionary<string, object> {
						        { "name", "Big Party" },
						        { "location", "MyHouse" },
						        { "date", DateTime.Now }
						    };

						    try
						    {
						        doc.PutProperties(props);
						        Debug.WriteLine("{0}: doc written to database with ID = {1}", TAG, doc.Id);
						    }
						    catch (Exception e)
						    {
						        Debug.WriteLine("{0}: Error putting properties to Couchbase Lite database = {1}", TAG, e.Message);
						    }

						    return docId;
						}
						]]></code-block>

						<code-block language="C#"><![CDATA[
						void HelloCBL()
						{
						    try
						    {
						        db = Couchbase.Lite.Manager.SharedInstance.GetDatabase(DB_NAME);
						    }
						    catch (Exception e)
						    {
						        Debug.WriteLine("{0}: Error getting database: {1}", TAG, e.Message);
						        return;
						    }

						    // Create the document
						    CreateDocument();
						}
						]]></code-block>

						<paragraph>
							<code>Dictionary</code> objects provide JSON-compatible representations of
							data that are suitable for creating documents that can be stored in the
							database. The content for the document created by this snippet is created in a
							<code>Dictionary</code> object named <code>props</code> that contains these
							keys: <code>name</code> and <code>location</code>. Each key has a
							value associated with it. The value for the <code>name</code> key contains
							the string &#8220;Big Party&#8221;, and the value for
							the <code>location</code> key contains the location the event is held at.
						</paragraph>
						<paragraph>
							The code snippet creates an empty <code>Document</code> object named
							<code>doc</code> that is saved to the database by using the
							<code>Document</code> class <code>PutProperties()</code> method. The
							<code>PutProperties</code> method can throw an exception, so the call is placed
							in a <code>try</code> block.
							The <code>PutProperties</code> method writes the contents of the dictionary into the Document, which actually
							saves the passed in <code>Dictionary</code> to the Couchbase Lite database on the local device.
							We return the documentID so that the caller has the document ID for their records.
						</paragraph>
						<paragraph>
							When a document is saved to the database, Couchbase Lite generates a
							document identifier property named <code>_id</code> and a revision identifier
							property named <code>_rev</code>, which are added to the stored
							document.
						</paragraph>
					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>View the <strong>Output</strong> window.</paragraph>
						<paragraph>The <strong>Output</strong> displays a message that
							logs the initial document content and the identifier that was assigned to it
							upon creation.</paragraph>
						<code-block>
							CouchbaseEvents: doc written to database with ID = a8336dc2-a791-4b71-86b5-5c7ea12fd896
						</code-block>
					</list-item>
				</ordered-list>
			</body>
		</task>

		<task id="retrieve-document">
			<title>Retrieve a document</title>
			<body>
				<paragraph>
					In this section, we will retrieve the document that was previously written to the database.
				</paragraph>
				<ordered-list>
					<list-item>
						<paragraph>
							Add the following code method to retrieve a document, and again call it from <code>HelloCBL</code>:
						</paragraph>

						<code-block language="C#"><![CDATA[
						Document RetrieveDocument(string docID)
						{
						    // retrieve the document from the database
						    var retrievedDoc = db.GetDocument(docID);

						    // display the retrieved document
						    LogDocProperties(retrievedDoc);

						    return retrievedDoc;
						}
						]]></code-block>

						<code-block language="csharp"><![CDATA[
						static void LogDocProperties(Document doc)
						{
						    doc.Properties.Select(x => String.Format("key={0}, value={1}", x.Key, x.Value))
						        .ToList().ForEach(y => Debug.WriteLine("{0}: {1}", TAG, y));
						}
						]]></code-block>

						<paragraph>
							This code snippet retrieves the document from the database by using the
							<code>Database</code> class <code>GetDocument()</code> method. The content of
							the retrieved document is written to the <strong>Application Output</strong> to log its keys and
							values. The retrieved document includes the <code>_id</code> and
							<code>_rev</code> properties created by Couchbase Lite, in addition to the keys
							and values that were saved in the previous section.
						</paragraph>
					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>
							View the <strong>Application Output</strong> to see the contents of the document including the added 
							<code>_id</code> and <code>_rev</code> properties.
						</paragraph>
						
						<code-block>
						CouchbaseEvents: key=name, value=Big Party
						CouchbaseEvents: key=location, value=MyHouse
						CouchbaseEvents: key=date, value=5/22/2015 2:05:16 PM
						CouchbaseEvents: key=_id, value=db783902-ceb4-4b28-84f8-59f197dae34a
						CouchbaseEvents: key=_rev, value=1-ac18fb7013148c1434eddf7b4e16b03e
						</code-block>

					</list-item>
				</ordered-list>
			</body>
		</task>

		<task id="update-document">
			<title>Update a document</title>
			<body>
				<paragraph>
					This section of the tutorial code modifies the document that was
					previously written to the database.
				</paragraph>

				<paragraph>
					To update an existing document, you will need the key. Letâ€™s take a look:
				</paragraph>

				<code-block language="C#"><![CDATA[
				void UpdateDocument(string docID)
				{
				    var doc = db.GetDocument(docID);

				    try
				    {
				        // Update the document with more data
				        var updatedProps = new Dictionary<string, object>(doc.Properties);

				        updatedProps.Add("eventDescription", "Everyone is invited!");
				        updatedProps.Add("address", "123 Elm St.");

				        // Save to the Couchbase local Couchbase Lite DB
				        doc.PutProperties(updatedProps);

				        // display the updated document
				        Debug.WriteLine("{0}: Updated Doc Properties:", TAG);
				        LogDocProperties(doc);
				    }
				    catch (CouchbaseLiteException e)
				    {
				        Debug.WriteLine("{0}: Error updating properties in Couchbase Lite database = {1}", TAG, e.Message);
				    }
				}
				]]>
				</code-block>

				<paragraph>
					We need to retrieve the original document before we can update its content. Given the
					Database and docId, we can retrieve the document. The code first makes a new
					<code>Dictionary</code> object and copies the existing properties of the document into it.
					Working on a copy of the document properties is helpful because to update a document
					successfully you need to include the current revision identifier. Then the code
					adds the value for <code>eventDescription</code> key and <code>address</code>.
					IMPORTANT: It would be easy to think that all that happens here is that the Document object is
					updated with data, but in fact this causes that document to be stored in the local database. This
					is also different from the data being replicated to the Sync Gateway. So far, there is no Sync
					Gateway involved. We will cover that later. This is currently all local data on the device only.
				</paragraph>

				<paragraph>
					When a document is updated, Couchbase Lite creates a new revision of
					the document that contains a new revision identifier in the <code>_rev</code>
					property. The document identifier in <code>_id</code> always remains the
					same.
				</paragraph>

				<paragraph>
					Build and run the app.
				</paragraph>

				<paragraph>
					The <strong>Output</strong> window displays the updated document. The updated document contains the 
					original <code>_id</code> value, a new <code>_rev</code> value, and the new and modified key-value pairs 
					as shown below:
				</paragraph>

				<code-block>
				CouchbaseEvents: Updated Doc Properties:
				CouchbaseEvents: key=name, value=Big Party
				CouchbaseEvents: key=location, value=MyHouse
				CouchbaseEvents: key=date, value=5/22/2015 2:10:54 PM
				CouchbaseEvents: key=_id, value=5aaa95b9-0b09-497c-b8e4-7775a198d208
				CouchbaseEvents: key=_rev, value=2-e1fc3c92e903496116da27c0af2060d0
				CouchbaseEvents: key=eventDescription, value=Everyone is invited!
				CouchbaseEvents: key=address, value=123 Elm St.
				</code-block>

			</body>
		</task>

		<task id="adding-attachment">
			<title>Adding an attachment</title>
			<body>
				<paragraph>
					In this section we will create an Attachment to the document. Add a method named <code>AddAttachment</code> with the following implementation and call it from <code>HelloCBL</code>.
				</paragraph>

				<code-block language="C#"><![CDATA[
				void AddAttachment(string docID)
				{
				    var doc = db.GetDocument(docID);

				    try
				    {
				        var revision = doc.CurrentRevision.CreateRevision();

				        var text = "This is some text in an attachment";
				        var data = Encoding.ASCII.GetBytes(text);
				        revision.SetAttachment("binaryData", "application/octet-stream", data);

				        // Save the document and attachment to the local db
				        revision.Save();
				    }
				    catch (CouchbaseLiteException e)
				    {
				        Debug.WriteLine("{0}: Error saving attachment = {1}", TAG, e.Message);
				    }
				}
				]]>
				</code-block>

				<paragraph>
					We start by fetching the document to which we want to attach the binary data. Then we create a
					byte array to hold our binary (attachment) data. We're simply creating this from a string in this case for demonstartion. 
					Then we get the current revision of the document, since the document could have been modified since we last read it, and 
					we want the latest and greatest data. We use the document factory method <code>CreateRevision</code> to request an UnsavedRevision 
					that we wish to update with an attachment. The UnsavedRevision method <code>SetAttachment</code> lets us place the attachment data 
					on the Document.
				</paragraph>

				<paragraph>
					Note we need to pass three parameters:
				</paragraph>

				<unordered-list>
					<list-item>
						The name of the attachment (multiple attachments are allowed)
					</list-item>
					<list-item>
						The MIME (Multipurpose Internet Mail Extensions) type (<ref href="http://en.wikipedia.org/wiki/Internet_media_type#List_of_common_media_types">see more</ref>)
					</list-item>
					<list-item>
						The attachment data that will be written to the Database when the UnsavedRevision is saved.
					</list-item>
				</unordered-list>

				<paragraph>
					Then we invoke the <code>Save</code> method to save the Document and its attachment to the Database locally.
				</paragraph>

				<paragraph>
					Once we have a document with an attachment, we will want to retrieve the attachment using
					the Couchbase Lite API. Letâ€™s see how:
				</paragraph>

				<code-block language="C#"><![CDATA[
				void ReadAttachment(string docID)
				{
				    var doc = db.GetExistingDocument(docID);
				    var savedRev = doc.CurrentRevision;
				    var attachment = savedRev.GetAttachment("binaryData");

				    using (var sr = new StreamReader(attachment.ContentStream))
				    {
				        var data = sr.ReadToEnd();

				        Debug.WriteLine("{0}: {1}", TAG, data);
				    }
				}
				]]>
				</code-block>

				<paragraph>
					To obtain the document with the attachment data given the document ID, we call the
					<code>GetExistingDocument</code> method of the Database instance. From the document, we want to
					make sure we have the most current revision, and since we saved it previously, it is a SavedRevision
					instance. As long as we know the unique name of the attachment on that SavedRevision, we retrieve
					the attachment by name using the <code>GetAttachment</code> method. The attachment's <code>ContentStream</code> 
					property returns the Stream we placed on the document as the actual attachment. We can then read the stream to 
					obtain the underlying data.
				</paragraph>

			</body>
		</task>

		<task id="delete-document">
			<title>Delete a document</title>
			<body>
				<paragraph>
					This section of the tutorial code deletes the document that was previously written to the database.
				</paragraph>
				<ordered-list>
					<list-item>
						<paragraph>Add the following method and call it from <code>HelloCBL</code>:</paragraph>

						<code-block language="C#"><![CDATA[
						void DeleteDocument(string docID)
						{
						    try
						    {
						        var doc = db.GetDocument(docID);
						        doc.Delete();
						        Debug.WriteLine("{0}: Deleted document deletion status = {1}", TAG, doc.Deleted);
						    }
						    catch (CouchbaseLiteException e)
						    {
						        Debug.WriteLine("{0}: Cannot delete document = {1}", TAG, e.Message);
						    }
						}
						]]>
						</code-block>

						<paragraph>
							The document is deleted by calling the <code>Delete</code> method on
							<code>doc</code>. Then to verify the deletion, it logs the value returned by
							the <code>Deleted</code> property.
						</paragraph>
					</list-item>
					<list-item>
						Build and run the app.
					</list-item>
					<list-item>
						<paragraph>View the <strong>Output</strong> window.</paragraph>
						<paragraph>The output displays a message that says the document was deleted.</paragraph>
						<code-block>
						CouchbaseEvents: Deleted document deletion status = True
						</code-block>
					</list-item>
				</ordered-list>
			</body>
		</task>
	</tasks>
</lesson>

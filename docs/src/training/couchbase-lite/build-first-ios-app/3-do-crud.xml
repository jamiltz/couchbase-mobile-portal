<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="do-crud">
	<title>Performing CRUD operations</title>
	<description>Create, retrieve, update, and delete documents in the HelloCBL database</description>
	<introduction>
		<paragraph>CRUD operations represent the basic interactions with a Couchbase Lite database. This section demonstrates how to create, retrieve, update, and delete documents. The tutorial code creates just one document and then in turn retrieves it, updates it, and finally deletes it. </paragraph>
		<paragraph>In this section, you replace stub code in the <code>HCAppDelegate.m</code>
			file with functional code.</paragraph>
		
	</introduction>
	
	<tasks>
		
		<task id="create-document">
			<title>Create a document</title>
			<body>
				<ordered-list>
					<list-item>
						<paragraph>Replace the stub for the <code>createTheDocument</code> method in the
							<code>HCAppDelegate.m</code> file with the following functional
							code:</paragraph>
						<code-block>
// creates the document
- (BOOL) createTheDocument {
    
    NSError *error;
    
    // create an object that contains data for the new document
    NSDictionary *myDictionary =
        @{@"message" : @"Hello Couchbase Lite!",
          @"name" : @"Joey",
          @"age" : @15,
          @"timestamp" : [[NSDate date] description]};
    
    // display the data for the new document
    NSLog(@"This is the data for the document: %@", myDictionary);
    
    // create an empty document
    CBLDocument* doc = [_database createDocument];
    
    // save the ID of the new document
    _docID = doc.documentID;
    
    // write the document to the database
    CBLRevision *newRevision = [doc putProperties: myDictionary error: &amp;error];
    if (!newRevision) {
        NSLog (@"Cannot write document to database. Error message: %@", error.localizedDescription);
        return NO;
    }
    
    NSLog(@"Document created and written to database. ID = %@", _docID);

    return YES;
    
}
							
						</code-block>
						<paragraph>The <code>createTheDocument</code> method creates an empty <code>CBLDocument</code> object named <code>doc</code>, which is saved to the database by using the <code>CBLDocument</code> class <code>putProperties:error:</code> method. This method returns a <code>CBLRevision</code> object, which is checked to make sure the document was written successfully. </paragraph>
						
						<paragraph><code>NSDictionary</code> objects provide JSON-compatible representations of data that are suitable for creating documents that you can store in the database. The document created by <code>createTheDocument</code> is an <code>NSDictionary</code> object named <code>myDictionary</code> that contains  several keys: <code>message</code>, <code>name</code>, <code>age</code>, and <code>timestamp</code>. Each key has a value associated with it. The value for the <code>message</code> key contains the string &#8220;Hello Couchbase Lite!&#8221;, the value for the<code>timestamp</code> key contains the time and date the document was created, the value for the <code>name</code> key contains the string "Joey," and the value for the <code>age</code> key contains the integer 15. The document content is written out to the console to log the keys and values.</paragraph>
						
						<paragraph>When a document is saved to the database, Couchbase Lite generates a document identifier property named <code>_id</code> and a revision identifier property named <code>_rev</code>, and adds them to the stored document.</paragraph>												
						
					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>View the console output.</paragraph>
						<paragraph>The console output displays messages similar to the following ones that log the initial document content and the identifier that was assigned to it upon creation.</paragraph>
						<code-block>
2014-05-07 14:25:35.335 HelloCBL[29967:60b] This is the data for the document: {
    age = 15;
    message = "Hello Couchbase Lite!";
    name = Joey;
    timestamp = "2014-05-07 21:25:35 +0000";
}
2014-05-07 14:25:35.337 HelloCBL[29967:60b] Document created and written to database. ID = C132BC15-5A2F-4ECE-9A4A-DA387C2A5B5D

						</code-block>
					</list-item>					
				</ordered-list>
			</body>
		</task>
		
		<task id="retrieve-document">
			<title>Retrieve a document</title>
			<body>
				<ordered-list>
					<list-item>
						<paragraph>Replace the stub for the <code>retrieveTheDocument</code> method in the
							<code>HCAppDelegate.m</code> file with the following functional
							code:</paragraph>
						<code-block>

// retrieves the document
- (BOOL) retrieveTheDocument {
    
    // retrieve the document from the database
    CBLDocument *retrievedDoc = [_database documentWithID: _docID];
    
    // display the retrieved document
    NSLog(@"The retrieved document contains: %@", retrievedDoc.properties);
    
    return YES;
}
							
						</code-block>
						<paragraph>The <code>retrieveTheDocument</code> method retrieves the document from the database by using the <code>CBLDatabase</code> class <code>documentWithID:</code> method. The content of the retrieved document is written out to the console to log its keys and values. The retrieved document includes the <code>_id</code> and <code>_rev</code> properties created by Couchbase Lite, in addition to the keys and values written by the  <code>createTheDocument</code> method.</paragraph>
						
					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>View the console output.</paragraph>
						<paragraph>The console output displays a message similar to the following one that displays the retrieved document. In the console output you can see the added <code>_id</code> and <code>_rev</code> properties.</paragraph>
						<code-block>
2014-05-07 14:25:35.338 HelloCBL[29967:60b] The retrieved document contains: {
    "_id" = "C132BC15-5A2F-4ECE-9A4A-DA387C2A5B5D";
    "_rev" = "1-4f822c280082da4be3a0b9644762eadb";
    age = 15;
    message = "Hello Couchbase Lite!";
    name = Joey;
    timestamp = "2014-05-07 21:25:35 +0000";
}
						</code-block>
					</list-item>					
				</ordered-list>
				
			</body>
		</task>
		
		<task id="update-document">
			<title>Update a document</title>
			<body>
				<ordered-list>
					<list-item>
						<paragraph>Replace the stub for the <code>updateTheDocument</code> method in the
							<code>HCAppDelegate.m</code> file with the following functional
							code:</paragraph>
						<code-block>
// updates the document
- (BOOL) updateTheDocument {
    
    NSError *error;

    // retrieve the document from the database
    CBLDocument *retrievedDoc = [_database documentWithID: _docID];

    // make a mutable copy of the properties from the document we just retrieved
    NSMutableDictionary *docContent = [retrievedDoc.properties mutableCopy];
    
    // modify the document properties
    [docContent setObject:@"Good Morning Couchbase Lite!!!" forKey:@"message"];
    [docContent setObject:@"breakfast" forKey:@"meal"];
    [docContent setObject:@"Green eggs and ham" forKey:@"entree"];
    [docContent setObject:@"burnt" forKey:@"toast"];
    
    // write the updated document to the database
    CBLSavedRevision *newRev = [retrievedDoc putProperties: docContent error: &amp;error];
    if (!newRev) {
        NSLog (@"Cannot update document. Error message: %@", error.localizedDescription);
    }
    
    // display the new revision of the document
    NSLog (@"The new revision of the document contains: %@", newRev.properties);
    
    return YES;
    
}							
						</code-block>
						<paragraph>The <code>updateTheDocument</code> method first retrieves the document from the database the same way it was retrieved in the <code>retrieveTheDocument</code> method. It then makes a mutable copy of the document content in an object named <code>docContent</code>. You need a mutable copy to work with because the <code>properties</code> object returned by the <code>CBLDocument</code> class is an <code>NSDictionary</code> object, which is not mutable.</paragraph>
						<paragraph>Next, the <code>updateTheDocument</code> method modifies the document content by changing the value of the <code>message</code> key and adding values for the new keys <code>meal</code>, <code>entree</code>, and <code>toast</code>. The properties in the retrieved document are replaced with the modified content and written to the database via the <code>putProperties:error:</code> method, which returns a <code>CBLSavedRevision</code> object.</paragraph>
						<paragraph>When a document is updated, Couchbase Lite creates a new revision of the document that contains a new revision identifier in the <code>_rev</code> property. The document identifier in <code>_id</code> always remains the same.</paragraph>
					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>View the console output.</paragraph>
						<paragraph>The console output displays a message similar to the following one that displays the updated document. The updated document contains the original <code>_id</code> value, a new <code>_rev</code> value, the new and modified key-value pairs, and the unmodified key-value pairs. </paragraph>
						<code-block>
2014-05-07 14:25:35.341 HelloCBL[29967:60b] The new revision of the document contains: {
    "_id" = "C132BC15-5A2F-4ECE-9A4A-DA387C2A5B5D";
    "_rev" = "2-f4d667aabdb483ec34f6e989ac4a36e1";
    age = 15;
    entree = "Green eggs and ham";
    meal = breakfast;
    message = "Good Morning Couchbase Lite!!!";
    name = Joey;
    timestamp = "2014-05-07 21:25:35 +0000";
    toast = burnt;
}
						</code-block>
					</list-item>					
				</ordered-list>
				
			</body>
		</task>
		
		<task id="delete-document">
			<title>Delete a document</title>
			<body>
				<ordered-list>
					<list-item>
						<paragraph>Replace the stub for the <code>deleteTheDocument</code> method in the
							<code>HCAppDelegate.m</code> file with the following functional
							code:</paragraph>
						<code-block>
// deletes the document
- (BOOL) deleteTheDocument {
    
    NSError *error;
    
    // retrieve the document from the database and then delete it
    if (![[_database documentWithID: _docID] deleteDocument: &amp;error])
        NSLog (@"Cannot delete document. Error message: %@", 
            error.localizedDescription);

    // verify the deletion by retrieving the document and 
    // checking whether it has been deleted
    CBLDocument *ddoc = [_database documentWithID: _docID];
    NSLog (@"The document with ID %@ is %@", _docID, 
        ([ddoc isDeleted] ? @"deleted" : @"not deleted"));
    
    return YES;
    
}							
						</code-block>
						<paragraph>The <code>deleteTheDocument</code> method retrieves the document from the database to get a pointer to it, and then deletes it via the <code>deleteDocument:</code> method from the <code>CBLDocument</code> class. After the document is deleted, the method retrieves the document again to verify that it was deleted and logs a message regarding the deletion status.</paragraph>
					</list-item>
					<list-item>Build and run the app.</list-item>
					<list-item>
						<paragraph>View the console output.</paragraph>
						<paragraph>The console output displays a message similar to the following one that says the document was deleted.</paragraph>
						<code-block>
2014-05-07 14:25:35.343 HelloCBL[29967:60b] The document with ID C132BC15-5A2F-4ECE-9A4A-DA387C2A5B5D is deleted
						</code-block>
					</list-item>					
				</ordered-list>
				
			</body>
		</task>
		
	</tasks>
</lesson>
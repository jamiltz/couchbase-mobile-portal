<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="understanding-live-query">
    <title>Understanding LiveQuery</title>
    <description></description>
    <introduction>
        <paragraph>
            To help us track the constant changes that could be occurring in mobile applications, Couchbase Lite has an
            implementation of the Observer pattern known as a LiveQuery. We will use LiveQuery to go deeper into the
            possibilities of how listening for changes on the server can help us provide reactive UI solutions.
        </paragraph>
    </introduction>

    <tasks>
        <task id="introduction">
            <title>Introduction</title>
            <body>

                <paragraph>
                    The Live Query functionality is available in the <code>CBLLiveQuery</code> class. It is a type of
                    observer on the Query object. The observer pattern sets up a relationship between two objects
                    whereby the observer (or listener) is notified of some event by the object it is observing. The
                    listener must register with the object, using KVO, so that the object knows who is registered and
                    listening.
                </paragraph>

                <paragraph>
                    Because the <code>CBLLiveQuery</code> came from the <code>CBLQuery</code> itself, it is already
                    set to observe the <code>CBLQuery</code> data, using an observer. Let us have a look at the code
                    for this now:
                </paragraph>

                <code-block language="objective-c"><![CDATA[
                    liveQuery = [orderedByDateQuery asLiveQuery];
                    [liveQuery addObserver: self forKeyPath:@"rows" options:0 context: NULL];
                    [liveQuery start];

                    - (void)observeValueForKeyPath: (NSString *)keyPath 
                                          ofObject: (id)object 
                                            change: (NSDictionary *)change 
                                           context: (void *)context { 
                        NSLog(@"Observe event received"); 
                    }
                ]]>
                </code-block>
            </body>
        </task>

        <task id="the-change-event">
            <title>The Change Event</title>
            <body>

                <paragraph>
                    The Live Query is listening for changes in the query result. For example, let us take a
                    <code>DocumentA</code> that is being indexed by a view we created earlier. When the revision of
                    <code>DocumentA</code> is saved after an update, there will be a new version of <code>DocumentA
                    </code> automatically generated.
                </paragraph>

                <ordered-list>
                    <list-item>
                        New revisions of a document causes a new ChangeEvent to be instantiated such that if 'DocumentA'
                        had one data element updated, like an “address” property, then this will cause a ChangeEvent to
                        be fired.
                    </list-item>
                    <list-item>
                        Also that if 'DocumentA' has three data property values that changed, such as “address”, “date”,
                        and “description” fields, then still only one ChangeEvent would be fired off. The reason is that
                        LiveQuery only listens at the Document version level and not at the data attribute level within
                        the document.
                    </list-item>
                    <list-item>
                        Furthermore, we receive the ChangeEvent but no details about what within the document was
                        changed. Therefore, the LiveQuery notifies the ChangeListener that data in the Query has been
                        updated, not how the actual data has been updated.
                    </list-item>
                    <list-item>
                        In order to figure out what exactly changed within the document, we would need to run a new
                        Query and compare the results to that of the previous query.
                    </list-item>
                </ordered-list>

                <paragraph>
                    Note that we receive the observer method call but no details about what within the document
                    changed. In order to know what exactly has changed, we would need to run a new <code>CBLQuery
                    </code> and compare the results to that of the previous query.
                </paragraph>

                <paragraph>
                    The observer method has access to the original <code>CBLQuery</code> data (before any change
                    occurs) via the <code>rows</code> property which provides a <code>CBLQueryEnumerator</code> over
                    that original data, like this:
                </paragraph>

                <code-block language="objective-c"><![CDATA[
                    - (void)observeAndUpdate: (NSString *)keyPath 
                                    ofObject: (id)object 
                                      change: (NSDictionary *)change 
                                     context: (void *)context { 
                        if (object == liveQuery) { 
                            CBLQueryEnumerator *originalData = liveQuery.rows; 
                            /* work with Query data */ 
                        }
                     }
                ]]>
                </code-block>
            </body>
        </task>


    </tasks>
</lesson>
